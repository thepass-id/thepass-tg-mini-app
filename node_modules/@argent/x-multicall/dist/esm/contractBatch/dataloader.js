import DataLoader from "dataloader";
import { CallData, hash, num } from "starknet";
import { aggregate } from "./aggregate";
export const getDataLoader = (provider, multicallAddress, options = {
    batchInterval: 500,
    maxBatchSize: 10,
}) => {
    const dl = new DataLoader(async (calls) => {
        dl.clearAll();
        const result = await aggregate(provider, multicallAddress, calls);
        return result;
    }, {
        maxBatchSize: options.maxBatchSize,
        batchScheduleFn(callback) {
            setTimeout(callback, options.batchInterval);
        },
        cacheKeyFn(call) {
            const { contractAddress, entrypoint, calldata = [] } = call;
            const cacheKeyContractAddress = num.toHexString(contractAddress);
            const cacheKeyEntrypoint = hash.getSelector(entrypoint);
            const cacheKeyCalldata = CallData.toCalldata(calldata)
                .map((c) => num.toHexString(c))
                .join("-");
            return `${cacheKeyContractAddress}--${cacheKeyEntrypoint}--${cacheKeyCalldata}`;
        },
    });
    return dl;
};
