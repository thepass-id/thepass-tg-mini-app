function r(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function i(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function n(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function f(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  r(e.outputLen), r(e.blockLen);
}
function u(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function s(e, t) {
  n(e);
  const o = t.outputLen;
  if (e.length < o)
    throw new Error(`digestInto() expects output buffer of length at least ${o}`);
}
const a = {
  number: r,
  bool: i,
  bytes: n,
  hash: f,
  exists: u,
  output: s
};
export {
  i as bool,
  n as bytes,
  a as default,
  u as exists,
  f as hash,
  r as number,
  s as output
};
