import { SHA2 as p } from "./_sha2.js";
import { wrapConstructor as u, rotr as b } from "./utils.js";
const g = (r, e, s) => r & e ^ ~r & s, w = (r, e, s) => r & e ^ r & s ^ e & s, B = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), o = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), n = /* @__PURE__ */ new Uint32Array(64);
class D extends p {
  constructor() {
    super(64, 32, 8, !1), this.A = o[0] | 0, this.B = o[1] | 0, this.C = o[2] | 0, this.D = o[3] | 0, this.E = o[4] | 0, this.F = o[5] | 0, this.G = o[6] | 0, this.H = o[7] | 0;
  }
  get() {
    const { A: e, B: s, C: t, D: a, E: i, F: h, G: c, H: f } = this;
    return [e, s, t, a, i, h, c, f];
  }
  // prettier-ignore
  set(e, s, t, a, i, h, c, f) {
    this.A = e | 0, this.B = s | 0, this.C = t | 0, this.D = a | 0, this.E = i | 0, this.F = h | 0, this.G = c | 0, this.H = f | 0;
  }
  process(e, s) {
    for (let x = 0; x < 16; x++, s += 4)
      n[x] = e.getUint32(s, !1);
    for (let x = 16; x < 64; x++) {
      const H = n[x - 15], l = n[x - 2], m = b(H, 7) ^ b(H, 18) ^ H >>> 3, C = b(l, 17) ^ b(l, 19) ^ l >>> 10;
      n[x] = C + n[x - 7] + m + n[x - 16] | 0;
    }
    let { A: t, B: a, C: i, D: h, E: c, F: f, G: d, H: A } = this;
    for (let x = 0; x < 64; x++) {
      const H = b(c, 6) ^ b(c, 11) ^ b(c, 25), l = A + H + g(c, f, d) + B[x] + n[x] | 0, C = (b(t, 2) ^ b(t, 13) ^ b(t, 22)) + w(t, a, i) | 0;
      A = d, d = f, f = c, c = h + l | 0, h = i, i = a, a = t, t = l + C | 0;
    }
    t = t + this.A | 0, a = a + this.B | 0, i = i + this.C | 0, h = h + this.D | 0, c = c + this.E | 0, f = f + this.F | 0, d = d + this.G | 0, A = A + this.H | 0, this.set(t, a, i, h, c, f, d, A);
  }
  roundClean() {
    n.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const G = /* @__PURE__ */ u(() => new D());
export {
  G as sha256
};
