const o = /* @__PURE__ */ BigInt(4294967295), i = /* @__PURE__ */ BigInt(32);
function f(t, r = !1) {
  return r ? { h: Number(t & o), l: Number(t >> i & o) } : { h: Number(t >> i & o) | 0, l: Number(t & o) | 0 };
}
function h(t, r = !1) {
  let n = new Uint32Array(t.length), l = new Uint32Array(t.length);
  for (let e = 0; e < t.length; e++) {
    const { h: c, l: u } = f(t[e], r);
    [n[e], l[e]] = [c, u];
  }
  return [n, l];
}
const g = (t, r, n) => t << n | r >>> 32 - n, m = (t, r, n) => r << n | t >>> 32 - n, A = (t, r, n) => r << n - 32 | t >>> 64 - n, B = (t, r, n) => t << n - 32 | r >>> 64 - n;
export {
  f as fromBig,
  A as rotlBH,
  B as rotlBL,
  g as rotlSH,
  m as rotlSL,
  h as split
};
