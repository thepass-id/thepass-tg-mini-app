import { ArgentBackendNetworkId } from '../backend';
import { Address } from '../chains';
import { IHttpService } from '../http';
import { Collection, NftItem, INFTService, PaginatedItems, PaginatedCollections } from './INFTService';
export type BackendCollectionType = "erc721" | "erc1155" | "starknetErc721" | "starknetErc1155";
interface ImageUrls {
    banner?: string;
    preview?: string;
    full?: string;
    original?: string;
}
interface ArgentProfile {
    address: string;
    imageUrls: ImageUrls;
    displayName?: string;
}
interface NftProperty {
    key: string;
    value: string;
    displayType?: string;
}
interface NftsItem {
    tokenId: string;
    contractAddress: Address;
    imageUrls: ImageUrls;
    name?: string;
    bestListPrice: number;
    owner: ArgentProfile;
}
interface NftResponse {
    tokenId: string;
    contractAddress: Address;
    properties: NftProperty[];
    name?: string;
    description?: string;
    imageUrls: ImageUrls;
    owner: ArgentProfile;
    spec: BackendCollectionType;
}
export declare class BackendNftService implements INFTService {
    protected readonly apiBase: string;
    private readonly httpService;
    constructor(apiBase: string, httpService: IHttpService);
    getNfts(chain: string, network: ArgentBackendNetworkId, _address: string, page?: number): Promise<PaginatedItems>;
    getCollection(chain: string, network: ArgentBackendNetworkId, _collectionAddress: string): Promise<Collection>;
    getNft(chain: string, network: ArgentBackendNetworkId, _collectionAddress: string, itemId: string): Promise<NftItem>;
    getProfileCollections(chain: string, network: ArgentBackendNetworkId, address: string, page?: number, withMetrics?: boolean): Promise<PaginatedCollections>;
    private getCollectionMetrics;
    protected normalizeAddress(address: string): Address;
    protected pageToPageIndex(page: number): number;
    mapItem(input: NftsItem | NftResponse, address?: string): NftItem;
}
export {};
