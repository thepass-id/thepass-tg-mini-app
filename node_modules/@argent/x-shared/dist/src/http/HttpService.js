import { isFunction as c } from "lodash-es";
import { HttpError as h } from "./HttpError.js";
import { HTTP_ERROR_MESSAGE as w } from "./IHttpService.js";
class m {
  constructor(r, t = "json") {
    this.requestInit = r, this.responseType = t;
  }
  async get(r, t) {
    const s = c(this.requestInit) ? await this.requestInit() : this.requestInit, a = {
      ...s,
      ...t,
      method: "GET",
      // merge headers
      headers: {
        ...s == null ? void 0 : s.headers,
        ...t == null ? void 0 : t.headers
      }
    }, e = await fetch(r, a).catch(async (o) => {
      let n;
      throw o instanceof Response && (n = await o.json().catch(() => {
      })), new h(w.FAILED_TO_FETCH_URL, 0, n);
    });
    if (this.responseType === "json") {
      if (!e.ok)
        throw new h(e.statusText, e.status, await e.json().catch(() => {
        }));
      return await e.json();
    }
    return e;
  }
  async post(r, t, s) {
    const a = c(this.requestInit) ? await this.requestInit() : this.requestInit, e = {
      ...a,
      ...t,
      method: "POST",
      // merge headers
      headers: {
        ...a == null ? void 0 : a.headers,
        ...t == null ? void 0 : t.headers
      }
    }, o = await fetch(r, e).catch(() => {
      throw new h(w.FAILED_TO_POST_URL, 0);
    });
    if (!o.ok)
      throw new h(o.statusText, o.status, await o.json());
    if (o.status === 204)
      return {};
    const n = await o.json();
    if (s)
      try {
        return s.parse(n);
      } catch (i) {
        throw new h(i.message, 0);
      }
    return n;
  }
  async put(r, t) {
    const s = c(this.requestInit) ? await this.requestInit() : this.requestInit, a = {
      ...s,
      ...t,
      method: "PUT",
      // merge headers
      headers: {
        ...s == null ? void 0 : s.headers,
        ...t == null ? void 0 : t.headers
      }
    }, e = await fetch(r, a).catch(() => {
      throw new h("Failed to put url", 0);
    });
    if (!e.ok)
      throw new h(e.statusText, e.status);
    return await e.json();
  }
  async delete(r, t) {
    const s = c(this.requestInit) ? await this.requestInit() : this.requestInit, a = {
      ...s,
      ...t,
      method: "DELETE",
      // merge headers
      headers: {
        ...s == null ? void 0 : s.headers,
        ...t == null ? void 0 : t.headers
      }
    }, e = await fetch(r, a).catch(() => {
      throw new h("Failed to delete url", 0);
    });
    if (!e.ok)
      throw new h(e.statusText, e.status);
  }
}
export {
  m as HTTPService
};
