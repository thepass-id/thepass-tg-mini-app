"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const r=require("./HttpError.cjs"),o=c=>{process.env.NODE_ENV};function h(c,e){const s=c.clone(),t=new Headers(s.headers);for(const[n,i]of Object.entries(e))t.set(n,i);return new Response(s.body,{status:s.status,statusText:c.statusText,headers:t})}class d{constructor(e,s,t,n){this.dateService=e,this.cacheService=s,this.httpService=t,this.options=n,this.inFlightRequests=new Map}async rawGet(e,s){try{const t=await this.cacheService.get(e),n=await this.dateService.now(),i=new Date(t.headers.get("date")||""),a=n.getTime()-i.getTime();if(a<this.options.freshFor)return o("ðŸŸ¢ [SWR] Using fresh cache"),t;if(a<this.options.staleFor)return this.fetchAndCache(e,s),o("ðŸŸ  [SWR] Revalidating cache"),t;throw new Error("Cache too old")}catch(t){if(t instanceof r.HttpError)throw t;return o(),await this.fetchAndCache(e,s)}}async get(e,s){const t=await this.rawGet(e,s);return this.parseResponse(t)}async fetchAndCache(e,s){const t=this.inFlightRequests.get(e);if(!t){const n=this.httpService.get(e,s).then(async i=>{const a=await this.dateService.now();return await this.cacheService.set(e,h(i,{date:a.toUTCString()})),i}).finally(()=>{this.inFlightRequests.delete(e)});return this.inFlightRequests.set(e,n),n}return o(),t}parseResponse(e){if(e.ok)return e.json();throw new r.HttpError(e.statusText,e.status)}}exports.SWRService=d;
