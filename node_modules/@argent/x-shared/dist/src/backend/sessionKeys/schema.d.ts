import { z } from 'zod';
export declare const backendSessionTxFeeSchema: z.ZodObject<{
    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    currentAmount: z.ZodNumber;
    maximumAmount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    tokenAddress: `0x${string}`;
    currentAmount: number;
    maximumAmount: number;
}, {
    tokenAddress: string;
    currentAmount: number;
    maximumAmount: number;
}>;
export declare const backendSessionAllowedMethodSchema: z.ZodObject<{
    contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    method: z.ZodString;
}, "strip", z.ZodTypeAny, {
    method: string;
    contractAddress: `0x${string}`;
}, {
    method: string;
    contractAddress: string;
}>;
export declare const backendSessionMetadataSchema: z.ZodObject<{
    projectID: z.ZodString;
    projectSignature: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    projectID: string;
    projectSignature?: unknown;
}, {
    projectID: string;
    projectSignature?: unknown;
}>;
export declare const backendSessionSchema: z.ZodObject<{
    network: z.ZodString; /** "SEPOLIA" */
    accountAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    sessionKey: z.ZodString;
    expirationTime: z.ZodNumber;
    gasFees: z.ZodOptional<z.ZodUnknown>;
    txFees: z.ZodArray<z.ZodObject<{
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        currentAmount: z.ZodNumber;
        maximumAmount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        tokenAddress: `0x${string}`;
        currentAmount: number;
        maximumAmount: number;
    }, {
        tokenAddress: string;
        currentAmount: number;
        maximumAmount: number;
    }>, "many">;
    allowedMethods: z.ZodArray<z.ZodObject<{
        contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        method: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        method: string;
        contractAddress: `0x${string}`;
    }, {
        method: string;
        contractAddress: string;
    }>, "many">;
    revoked: z.ZodBoolean;
    createdTime: z.ZodNumber;
    type: z.ZodString;
    metadata: z.ZodObject<{
        projectID: z.ZodString;
        projectSignature: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        projectID: string;
        projectSignature?: unknown;
    }, {
        projectID: string;
        projectSignature?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: string;
    network: string;
    accountAddress: `0x${string}`;
    sessionKey: string;
    expirationTime: number;
    txFees: {
        tokenAddress: `0x${string}`;
        currentAmount: number;
        maximumAmount: number;
    }[];
    allowedMethods: {
        method: string;
        contractAddress: `0x${string}`;
    }[];
    revoked: boolean;
    createdTime: number;
    metadata: {
        projectID: string;
        projectSignature?: unknown;
    };
    gasFees?: unknown;
}, {
    type: string;
    network: string;
    accountAddress: string;
    sessionKey: string;
    expirationTime: number;
    txFees: {
        tokenAddress: string;
        currentAmount: number;
        maximumAmount: number;
    }[];
    allowedMethods: {
        method: string;
        contractAddress: string;
    }[];
    revoked: boolean;
    createdTime: number;
    metadata: {
        projectID: string;
        projectSignature?: unknown;
    };
    gasFees?: unknown;
}>;
export type BackendSessionTxFee = z.infer<typeof backendSessionTxFeeSchema>;
export type BackendSession = z.infer<typeof backendSessionSchema>;
