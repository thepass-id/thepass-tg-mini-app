const l = (t) => /^(-?\d+\.?\d*|\.\d+)[eE]([+-]?\d+)$/.test(t), d = (t) => {
  if (!l(t))
    throw new Error("Invalid scientific notation");
  const [n, o] = t.toLowerCase().split("e"), e = parseInt(o, 10), s = n.indexOf("."), c = n.replace(".", "").replace("-", ""), r = n.startsWith("-");
  let i = c, a = s === -1 ? 0 : n.length - s - 1;
  return e > 0 ? i = i.padEnd(i.length + e, "0") : e < 0 && (a += Math.abs(e)), i = i.replace(/^0+/, "") || "0", {
    value: BigInt(`${r ? "-" : ""}${i}`),
    decimals: a
  };
}, g = (t, n) => {
  if (l(t))
    return d(t);
  const [o, e = ""] = t.split("."), s = o.startsWith("-"), c = s ? o.slice(1) : o, r = n ?? e.length, i = e.slice(0, r), a = n !== void 0 && e.length > n ? p(i, e[n]) : i.padEnd(r, "0");
  return {
    value: BigInt(`${s ? "-" : ""}${c}${a}`),
    decimals: r
  };
}, p = (t, n) => Number(n) >= 5 ? (BigInt(t) + 1n).toString().padStart(t.length, "0") : t;
export {
  g as parseUnits
};
