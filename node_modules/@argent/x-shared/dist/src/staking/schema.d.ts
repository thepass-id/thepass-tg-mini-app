import { z } from 'zod';
export declare const liquidStakingInvestmentSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"staking">;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }>;
        withdrawalFees: z.ZodObject<{
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }>;
        performanceFees: z.ZodOptional<z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "staking";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    learnMoreUrl?: string | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "staking";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    learnMoreUrl?: string | undefined;
}>;
export declare const lendingInvestmentSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"lending">;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
        }, {
            totalFee: string;
        }>;
        withdrawalFees: z.ZodObject<{
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
        }, {
            totalFee: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    }, {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    }>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "lending";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    };
    learnMoreUrl?: string | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "lending";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    };
    learnMoreUrl?: string | undefined;
}>;
export declare const stakerInfoSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    iconUrl: z.ZodOptional<z.ZodString>;
    address: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    address?: string | undefined;
    iconUrl?: string | undefined;
}, {
    name?: string | undefined;
    address?: string | undefined;
    iconUrl?: string | undefined;
}>;
export type StakerInfo = z.infer<typeof stakerInfoSchema>;
export declare const strkDelegatedStakingInvestmentSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"strkDelegatedStaking">;
    stakerInfo: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        iconUrl: z.ZodOptional<z.ZodString>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }>;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
        useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
        useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
        amountsRequirement: z.ZodOptional<z.ZodEnum<["fullBalance"]>>;
        timelockDuration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>;
        withdrawalFees: z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>;
        performanceFees: z.ZodOptional<z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }>;
    buyEnabled: z.ZodOptional<z.ZodBoolean>;
    sellEnabled: z.ZodOptional<z.ZodBoolean>;
    claimEnabled: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    category: "strkDelegatedStaking";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    learnMoreUrl?: string | undefined;
    buyEnabled?: boolean | undefined;
    sellEnabled?: boolean | undefined;
    claimEnabled?: boolean | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    category: "strkDelegatedStaking";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    learnMoreUrl?: string | undefined;
    buyEnabled?: boolean | undefined;
    sellEnabled?: boolean | undefined;
    claimEnabled?: boolean | undefined;
}>;
export declare const investmentSchema: z.ZodDiscriminatedUnion<"category", [z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"staking">;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }>;
        withdrawalFees: z.ZodObject<{
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
        }>;
        performanceFees: z.ZodOptional<z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "staking";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    learnMoreUrl?: string | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "staking";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    learnMoreUrl?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"lending">;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
        }, {
            totalFee: string;
        }>;
        withdrawalFees: z.ZodObject<{
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
        }, {
            totalFee: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    }, {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    }>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "lending";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    };
    learnMoreUrl?: string | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    buyEnabled: boolean;
    sellEnabled: boolean;
    category: "lending";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
    };
    fees: {
        depositFees: {
            totalFee: string;
        };
        withdrawalFees: {
            totalFee: string;
        };
    };
    learnMoreUrl?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    dappId: z.ZodString;
    productId: z.ZodString;
    productName: z.ZodString;
    chain: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    iconUrl: z.ZodString;
    learnMoreUrl: z.ZodOptional<z.ZodString>;
    riskFactor: z.ZodEnum<["low"]>;
    metrics: z.ZodObject<{
        baseApy: z.ZodString;
        totalApy: z.ZodString;
        tvl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }, {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    }>;
    incentives: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodString;
        metric: z.ZodObject<{
            apy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            apy: string;
        }, {
            apy: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }, {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }>, "many">;
    buyEnabled: z.ZodBoolean;
    sellEnabled: z.ZodBoolean;
}, {
    category: z.ZodLiteral<"strkDelegatedStaking">;
    stakerInfo: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        iconUrl: z.ZodOptional<z.ZodString>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }>;
    investableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
        useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    }>;
    withdrawableAssets: z.ZodObject<{
        tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        tokensRequirement: z.ZodEnum<["any"]>;
        useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
        amountsRequirement: z.ZodOptional<z.ZodEnum<["fullBalance"]>>;
        timelockDuration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    }, {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    }>;
    fees: z.ZodObject<{
        depositFees: z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>;
        withdrawalFees: z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>;
        performanceFees: z.ZodOptional<z.ZodObject<{
            argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            totalFee: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }, {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }, {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    }>;
    buyEnabled: z.ZodOptional<z.ZodBoolean>;
    sellEnabled: z.ZodOptional<z.ZodBoolean>;
    claimEnabled: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    category: "strkDelegatedStaking";
    investableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    };
    withdrawableAssets: {
        tokenAddresses: `0x${string}`[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    learnMoreUrl?: string | undefined;
    buyEnabled?: boolean | undefined;
    sellEnabled?: boolean | undefined;
    claimEnabled?: boolean | undefined;
}, {
    name: string;
    chain: string;
    dappId: string;
    description: string;
    metrics: {
        baseApy: string;
        totalApy: string;
        tvl?: string | undefined;
    };
    id: string;
    productId: string;
    productName: string;
    iconUrl: string;
    riskFactor: "low";
    incentives: {
        name: string;
        description: string;
        iconUrl: string;
        learnMoreUrl: string;
        metric: {
            apy: string;
        };
    }[];
    category: "strkDelegatedStaking";
    investableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
    };
    withdrawableAssets: {
        tokenAddresses: string[];
        tokensRequirement: "any";
        useDecomposedBalances?: boolean | undefined;
        amountsRequirement?: "fullBalance" | undefined;
        timelockDuration?: number | undefined;
    };
    fees: {
        depositFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        withdrawalFees: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        };
        performanceFees?: {
            totalFee: string;
            protocolFee?: string | null | undefined;
            argentFee?: string | null | undefined;
            providerFee?: string | null | undefined;
        } | undefined;
    };
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    learnMoreUrl?: string | undefined;
    buyEnabled?: boolean | undefined;
    sellEnabled?: boolean | undefined;
    claimEnabled?: boolean | undefined;
}>]>;
export type Investment = z.infer<typeof investmentSchema>;
export type LiquidStakingInvestment = z.infer<typeof liquidStakingInvestmentSchema>;
export type LendingInvestment = z.infer<typeof lendingInvestmentSchema>;
export type StrkDelegatedStakingInvestment = z.infer<typeof strkDelegatedStakingInvestmentSchema>;
export declare const investmentsResponseSchema: z.ZodObject<{
    investments: z.ZodArray<z.ZodDiscriminatedUnion<"category", [z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        dappId: z.ZodString;
        productId: z.ZodString;
        productName: z.ZodString;
        chain: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodOptional<z.ZodString>;
        riskFactor: z.ZodEnum<["low"]>;
        metrics: z.ZodObject<{
            baseApy: z.ZodString;
            totalApy: z.ZodString;
            tvl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }>;
        incentives: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            iconUrl: z.ZodString;
            learnMoreUrl: z.ZodString;
            metric: z.ZodObject<{
                apy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                apy: string;
            }, {
                apy: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }>, "many">;
        buyEnabled: z.ZodBoolean;
        sellEnabled: z.ZodBoolean;
    }, {
        category: z.ZodLiteral<"staking">;
        investableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
        }>;
        withdrawableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
        }>;
        fees: z.ZodObject<{
            depositFees: z.ZodObject<{
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
            }>;
            withdrawalFees: z.ZodObject<{
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
            }>;
            performanceFees: z.ZodOptional<z.ZodObject<{
                argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        }, {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "staking";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        learnMoreUrl?: string | undefined;
    }, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "staking";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        learnMoreUrl?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        dappId: z.ZodString;
        productId: z.ZodString;
        productName: z.ZodString;
        chain: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodOptional<z.ZodString>;
        riskFactor: z.ZodEnum<["low"]>;
        metrics: z.ZodObject<{
            baseApy: z.ZodString;
            totalApy: z.ZodString;
            tvl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }>;
        incentives: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            iconUrl: z.ZodString;
            learnMoreUrl: z.ZodString;
            metric: z.ZodObject<{
                apy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                apy: string;
            }, {
                apy: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }>, "many">;
        buyEnabled: z.ZodBoolean;
        sellEnabled: z.ZodBoolean;
    }, {
        category: z.ZodLiteral<"lending">;
        investableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
        }>;
        withdrawableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
        }>;
        fees: z.ZodObject<{
            depositFees: z.ZodObject<{
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
            }, {
                totalFee: string;
            }>;
            withdrawalFees: z.ZodObject<{
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
            }, {
                totalFee: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        }, {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        }>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "lending";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        };
        learnMoreUrl?: string | undefined;
    }, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "lending";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        };
        learnMoreUrl?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        dappId: z.ZodString;
        productId: z.ZodString;
        productName: z.ZodString;
        chain: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        iconUrl: z.ZodString;
        learnMoreUrl: z.ZodOptional<z.ZodString>;
        riskFactor: z.ZodEnum<["low"]>;
        metrics: z.ZodObject<{
            baseApy: z.ZodString;
            totalApy: z.ZodString;
            tvl: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }, {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        }>;
        incentives: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            iconUrl: z.ZodString;
            learnMoreUrl: z.ZodString;
            metric: z.ZodObject<{
                apy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                apy: string;
            }, {
                apy: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }, {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }>, "many">;
        buyEnabled: z.ZodBoolean;
        sellEnabled: z.ZodBoolean;
    }, {
        category: z.ZodLiteral<"strkDelegatedStaking">;
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        investableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
            useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        }>;
        withdrawableAssets: z.ZodObject<{
            tokenAddresses: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
            tokensRequirement: z.ZodEnum<["any"]>;
            useDecomposedBalances: z.ZodOptional<z.ZodBoolean>;
            amountsRequirement: z.ZodOptional<z.ZodEnum<["fullBalance"]>>;
            timelockDuration: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        }, {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        }>;
        fees: z.ZodObject<{
            depositFees: z.ZodObject<{
                argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }>;
            withdrawalFees: z.ZodObject<{
                argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }>;
            performanceFees: z.ZodOptional<z.ZodObject<{
                argentFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                protocolFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                providerFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                totalFee: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }, {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        }, {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        }>;
        buyEnabled: z.ZodOptional<z.ZodBoolean>;
        sellEnabled: z.ZodOptional<z.ZodBoolean>;
        claimEnabled: z.ZodOptional<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        category: "strkDelegatedStaking";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        learnMoreUrl?: string | undefined;
        buyEnabled?: boolean | undefined;
        sellEnabled?: boolean | undefined;
        claimEnabled?: boolean | undefined;
    }, {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        category: "strkDelegatedStaking";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        learnMoreUrl?: string | undefined;
        buyEnabled?: boolean | undefined;
        sellEnabled?: boolean | undefined;
        claimEnabled?: boolean | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    investments: ({
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "staking";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        learnMoreUrl?: string | undefined;
    } | {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "lending";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        };
        learnMoreUrl?: string | undefined;
    } | {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        category: "strkDelegatedStaking";
        investableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        };
        withdrawableAssets: {
            tokenAddresses: `0x${string}`[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        learnMoreUrl?: string | undefined;
        buyEnabled?: boolean | undefined;
        sellEnabled?: boolean | undefined;
        claimEnabled?: boolean | undefined;
    })[];
}, {
    investments: ({
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "staking";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        learnMoreUrl?: string | undefined;
    } | {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        buyEnabled: boolean;
        sellEnabled: boolean;
        category: "lending";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
        };
        fees: {
            depositFees: {
                totalFee: string;
            };
            withdrawalFees: {
                totalFee: string;
            };
        };
        learnMoreUrl?: string | undefined;
    } | {
        name: string;
        chain: string;
        dappId: string;
        description: string;
        metrics: {
            baseApy: string;
            totalApy: string;
            tvl?: string | undefined;
        };
        id: string;
        productId: string;
        productName: string;
        iconUrl: string;
        riskFactor: "low";
        incentives: {
            name: string;
            description: string;
            iconUrl: string;
            learnMoreUrl: string;
            metric: {
                apy: string;
            };
        }[];
        category: "strkDelegatedStaking";
        investableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
        };
        withdrawableAssets: {
            tokenAddresses: string[];
            tokensRequirement: "any";
            useDecomposedBalances?: boolean | undefined;
            amountsRequirement?: "fullBalance" | undefined;
            timelockDuration?: number | undefined;
        };
        fees: {
            depositFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            withdrawalFees: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            };
            performanceFees?: {
                totalFee: string;
                protocolFee?: string | null | undefined;
                argentFee?: string | null | undefined;
                providerFee?: string | null | undefined;
            } | undefined;
        };
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        learnMoreUrl?: string | undefined;
        buyEnabled?: boolean | undefined;
        sellEnabled?: boolean | undefined;
        claimEnabled?: boolean | undefined;
    })[];
}>;
export type InvestmentsResponse = z.infer<typeof investmentsResponseSchema>;
export declare const strkStakingCalldataResponseSchema: z.ZodObject<{
    calls: z.ZodArray<z.ZodType<import('starknet').Call, z.ZodTypeDef, import('starknet').Call>, "many">;
}, "strip", z.ZodTypeAny, {
    calls: import('starknet').Call[];
}, {
    calls: import('starknet').Call[];
}>;
export type StrkStakingCalldataResponse = z.infer<typeof strkStakingCalldataResponseSchema>;
export declare const strkStakingCalldataSchema: z.ZodObject<{
    investmentId: z.ZodString;
    investmentType: z.ZodOptional<z.ZodEnum<["staking", "lending", "strkDelegatedStaking"]>>;
    accountAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    stakerInfo: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        iconUrl: z.ZodOptional<z.ZodString>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }>;
    amount: z.ZodString;
}, "strip", z.ZodTypeAny, {
    amount: string;
    accountAddress: `0x${string}`;
    tokenAddress: `0x${string}`;
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    investmentId: string;
    investmentType?: "staking" | "lending" | "strkDelegatedStaking" | undefined;
}, {
    amount: string;
    accountAddress: string;
    tokenAddress: string;
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    investmentId: string;
    investmentType?: "staking" | "lending" | "strkDelegatedStaking" | undefined;
}>;
export type StrkStakingCalldata = z.infer<typeof strkStakingCalldataSchema>;
export declare const stakingActionSchema: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
export declare const buildSellOptsSchema: z.ZodObject<{
    useFullBalance: z.ZodOptional<z.ZodBoolean>;
    subsequentTransaction: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    useFullBalance?: boolean | undefined;
    subsequentTransaction?: boolean | undefined;
}, {
    useFullBalance?: boolean | undefined;
    subsequentTransaction?: boolean | undefined;
}>;
export type BuildSellOpts = z.infer<typeof buildSellOptsSchema>;
export declare const investmentMetaSchema: z.ZodObject<{
    useFullBalance: z.ZodOptional<z.ZodBoolean>;
    subsequentTransaction: z.ZodOptional<z.ZodBoolean>;
    investmentId: z.ZodOptional<z.ZodString>;
    stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
    stakerInfo: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        iconUrl: z.ZodOptional<z.ZodString>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }>;
    tokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    amount: z.ZodString;
}, "strip", z.ZodTypeAny, {
    amount: string;
    tokenAddress: `0x${string}`;
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
    investmentId?: string | undefined;
    useFullBalance?: boolean | undefined;
    subsequentTransaction?: boolean | undefined;
}, {
    amount: string;
    tokenAddress: string;
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
    investmentId?: string | undefined;
    useFullBalance?: boolean | undefined;
    subsequentTransaction?: boolean | undefined;
}>;
export type InvestmentMeta = z.infer<typeof investmentMetaSchema>;
