import { z as e } from "zod";
import { callSchema as a } from "../utils/starknet/starknet.js";
import { addressSchemaArgentBackend as t, addressSchema as s } from "../chains/starknet/address.js";
const n = e.object({
  id: e.string(),
  dappId: e.string(),
  productId: e.string(),
  productName: e.string(),
  chain: e.string(),
  name: e.string(),
  description: e.string(),
  iconUrl: e.string().url(),
  learnMoreUrl: e.string().url().optional(),
  riskFactor: e.enum(["low"]),
  metrics: e.object({
    baseApy: e.string(),
    totalApy: e.string(),
    tvl: e.string().optional()
  }),
  incentives: e.array(e.object({
    name: e.string(),
    description: e.string(),
    iconUrl: e.string().url(),
    learnMoreUrl: e.string().url(),
    metric: e.object({
      apy: e.string()
    })
  })),
  buyEnabled: e.boolean(),
  sellEnabled: e.boolean()
}), l = n.extend({
  category: e.literal("staking"),
  investableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"])
  }),
  withdrawableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"])
  }),
  fees: e.object({
    depositFees: e.object({
      protocolFee: e.string().nullable().optional(),
      totalFee: e.string()
    }),
    withdrawalFees: e.object({
      protocolFee: e.string().nullable().optional(),
      totalFee: e.string()
    }),
    performanceFees: e.object({
      argentFee: e.string().nullable().optional(),
      protocolFee: e.string().nullable().optional(),
      providerFee: e.string().nullable().optional(),
      totalFee: e.string()
    }).optional()
  })
}), r = n.extend({
  category: e.literal("lending"),
  investableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"])
  }),
  withdrawableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"])
  }),
  fees: e.object({
    depositFees: e.object({
      totalFee: e.string()
    }),
    withdrawalFees: e.object({
      totalFee: e.string()
    })
  })
}), o = e.object({
  name: e.string().optional(),
  iconUrl: e.string().url().optional(),
  address: e.string().optional()
}), i = n.extend({
  category: e.literal("strkDelegatedStaking"),
  stakerInfo: o,
  investableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"]),
    useDecomposedBalances: e.boolean().optional()
  }),
  withdrawableAssets: e.object({
    tokenAddresses: e.array(t),
    tokensRequirement: e.enum(["any"]),
    useDecomposedBalances: e.boolean().optional(),
    amountsRequirement: e.enum(["fullBalance"]).optional(),
    timelockDuration: e.number().optional()
  }),
  fees: e.object({
    depositFees: e.object({
      argentFee: e.string().nullable().optional(),
      protocolFee: e.string().nullable().optional(),
      providerFee: e.string().nullable().optional(),
      totalFee: e.string()
    }),
    withdrawalFees: e.object({
      argentFee: e.string().nullable().optional(),
      protocolFee: e.string().nullable().optional(),
      providerFee: e.string().nullable().optional(),
      totalFee: e.string()
    }),
    performanceFees: e.object({
      argentFee: e.string().nullable().optional(),
      protocolFee: e.string().nullable().optional(),
      providerFee: e.string().nullable().optional(),
      totalFee: e.string()
    }).optional()
  }),
  buyEnabled: e.boolean().optional(),
  sellEnabled: e.boolean().optional(),
  claimEnabled: e.boolean().optional()
}), c = e.discriminatedUnion("category", [
  l,
  r,
  i
]), u = e.object({
  investments: e.array(c)
}), k = e.object({
  calls: e.array(a)
}), F = e.object({
  investmentId: e.string(),
  investmentType: e.enum(["staking", "lending", "strkDelegatedStaking"]).optional(),
  accountAddress: t,
  tokenAddress: t,
  stakerInfo: o,
  amount: e.string()
}), d = e.enum([
  "deposit",
  "stake",
  "initiateWithdraw",
  "withdraw",
  "claim"
]), g = e.object({
  useFullBalance: e.boolean().optional(),
  subsequentTransaction: e.boolean().optional()
}), j = e.object({
  investmentId: e.string().optional(),
  stakingAction: d,
  stakerInfo: o,
  tokenAddress: s,
  amount: e.string(),
  ...g.shape
});
export {
  g as buildSellOptsSchema,
  j as investmentMetaSchema,
  c as investmentSchema,
  u as investmentsResponseSchema,
  r as lendingInvestmentSchema,
  l as liquidStakingInvestmentSchema,
  o as stakerInfoSchema,
  d as stakingActionSchema,
  i as strkDelegatedStakingInvestmentSchema,
  k as strkStakingCalldataResponseSchema,
  F as strkStakingCalldataSchema
};
