import { Call } from 'starknet';
import { ArgentBackendNetworkId } from '../backend';
import { Address } from '../chains';
import { ApiData } from '../http/apiData';
export interface ApiTransactionReview {
    assessment: ApiTransactionReviewAssessment;
    assessmentReason?: string;
    assessmentDetails: {
        contract_address: string;
    };
    activity?: ApiTransactionReviewActivity;
}
export type ApiTransactionReviewAssessment = "warn" | "neutral" | "partial" | "verified";
export interface IUseTransactionReview {
    address?: string;
    network?: ApiTransactionReviewNetwork;
    transactions: Call | Call[];
    transactionReviewEnabled?: boolean;
    apiData: ApiData;
}
export interface ApiTransactionReviewToken {
    address: Address;
    name?: string;
    symbol?: string;
    decimals: number;
    unknown: boolean;
    type: "ERC20" | "ERC721";
}
export declare const apiTransactionReviewActivityType: readonly ["account-upgrade", "approve", "set-approval-for-all", "swap", "transfer"];
export type ApiTransactionReviewSlippageType = "equals" | "at_least" | "at_most";
export type ApiTransactionReviewActivityType = (typeof apiTransactionReviewActivityType)[number];
export type TransactionReviewWithType = ApiTransactionReview & {
    type: ApiTransactionReviewActivityType;
};
export interface ApiTransactionReviewActivity {
    value?: {
        token: ApiTransactionReviewToken;
        tokenId?: string;
        amount?: string;
        /** usd converted fiat equivalent of token amount */
        usd?: number;
        slippage: ApiTransactionReviewSlippageType;
    };
    dapp?: {
        address: Address;
        name: string;
    };
    src?: {
        token: ApiTransactionReviewToken;
        amount: string;
        usd: number;
        slippage: ApiTransactionReviewSlippageType;
    };
    dst?: {
        token: ApiTransactionReviewToken;
        amount: string;
        usd: number;
        slippage: ApiTransactionReviewSlippageType;
    };
    recipient?: string;
    spender?: string;
    type: ApiTransactionReviewActivityType;
}
export interface ApiTransactionReview {
    assessment: ApiTransactionReviewAssessment;
    assessmentReason?: string;
    assessmentDetails: {
        contract_address: string;
    };
    activity?: ApiTransactionReviewActivity;
}
export interface ApiTransactionReviewResponse {
    assessment: ApiTransactionReviewAssessment;
    reason?: string;
    reviews: ApiTransactionReview[];
    targetedDapp: ApiTransactionReviewTargettedDapp;
}
export type ApiTransactionReviewTargettedDapp = {
    name: string;
    description: string;
    iconUrl: string;
    links: {
        name: string;
        url: string;
        position: number;
    }[];
};
export type ApiTransactionReviewNetwork = ArgentBackendNetworkId | "morden" | "ropsten" | "rinkeby" | "kovan";
export interface ApiTransactionReviewRequestBody {
    network: ApiTransactionReviewNetwork;
    account: string;
    calls: Call[];
}
