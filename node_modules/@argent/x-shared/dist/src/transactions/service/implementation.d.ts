import { Account } from 'starknet';
import { Address } from '../../chains';
import { EnrichedSimulateAndReview } from '../../features/simulation';
import { IHttpService } from '../../http';
import { TransactionReviewTransactions } from '../estimate';
import { AccountDeployTransaction } from '../types';
import { ITransactionReviewServiceWeb } from './interface';
import { ITransactionReviewLabel, ITransactionReviewWarning } from './types';
/**
 * TransactionReviewService class implements ITransactionReviewService interface.
 */
export declare class TransactionReviewServiceWeb implements ITransactionReviewServiceWeb {
    protected readonly apiBase: string;
    protected readonly httpService: IHttpService;
    constructor(apiBase: string, httpService: IHttpService);
    /**
     * Fetch transaction review labels
     * @returns {Promise<TransactionReviewLabel[] | undefined>} The account activities.
     */
    getLabels(): Promise<ITransactionReviewLabel[] | undefined>;
    /**
     * Fetch transaction review warnings.
     * @returns {Promise<TransactionReviewWarning[] | undefined>} The account activities.
     */
    getWarnings(): Promise<ITransactionReviewWarning[] | undefined>;
    simulateAndReview(account: Account, transactions: TransactionReviewTransactions[], feeTokenAddress: Address, appDomain?: string, accountDeployTransaction?: AccountDeployTransaction, isDelayedTransaction?: boolean): Promise<EnrichedSimulateAndReview | undefined>;
    private getCallsFromTx;
    fallbackToOnchainFeeEstimation({ transactions, account, isDeploymentTransaction, feeTokenAddress, accountDeployTransaction, }: {
        transactions: TransactionReviewTransactions[];
        account: Account;
        isDeploymentTransaction: boolean;
        feeTokenAddress: Address;
        accountDeployTransaction?: AccountDeployTransaction;
    }): Promise<{
        transactions: never[];
        enrichedFeeEstimation: {
            transactions: {
                amount: bigint;
                pricePerUnit: bigint;
                feeTokenAddress: `0x${string}`;
                max?: {
                    amount: bigint;
                    pricePerUnit: bigint;
                } | {
                    maxFee: bigint;
                } | undefined;
                dataGasConsumed?: bigint | undefined;
                dataGasPrice?: bigint | undefined;
            };
            deployment?: {
                amount: bigint;
                pricePerUnit: bigint;
                feeTokenAddress: `0x${string}`;
                max?: {
                    amount: bigint;
                    pricePerUnit: bigint;
                } | {
                    maxFee: bigint;
                } | undefined;
                dataGasConsumed?: bigint | undefined;
                dataGasPrice?: bigint | undefined;
            } | undefined;
        };
        isBackendDown: boolean;
    }>;
    private fetchFeesOnchain;
}
