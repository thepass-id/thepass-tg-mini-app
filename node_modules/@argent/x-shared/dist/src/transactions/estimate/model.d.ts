import { CairoVersion, Call, Calldata, TransactionType } from 'starknet';
import { z } from 'zod';
export declare const transactionReviewTransactionsSchema: z.ZodObject<{
    type: z.ZodDefault<z.ZodEnum<["DECLARE", "DEPLOY", "DEPLOY_ACCOUNT", "INVOKE"]>>;
    calls: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodType<Call, z.ZodTypeDef, Call>, "many">, z.ZodType<Call, z.ZodTypeDef, Call>]>>;
    calldata: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    classHash: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    salt: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    signature: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    type: "DECLARE" | "DEPLOY" | "DEPLOY_ACCOUNT" | "INVOKE";
    salt?: `0x${string}` | undefined;
    signature?: string[] | undefined;
    calldata?: string[] | undefined;
    classHash?: `0x${string}` | undefined;
    calls?: Call | Call[] | undefined;
}, {
    type?: "DECLARE" | "DEPLOY" | "DEPLOY_ACCOUNT" | "INVOKE" | undefined;
    salt?: string | undefined;
    signature?: string[] | undefined;
    calldata?: string[] | undefined;
    classHash?: string | undefined;
    calls?: Call | Call[] | undefined;
}>;
export type TransactionReviewTransactions = z.infer<typeof transactionReviewTransactionsSchema>;
export type WEI = "WEI" | "wei";
export type FRI = "FRI" | "fri";
export interface ApiTransactionReviewV2RequestBody {
    transactions: Array<{
        type: TransactionType;
        chainId: string;
        cairoVersion: CairoVersion;
        nonce: string;
        version: string;
        account: string;
        calls?: Call[];
        calldata?: Calldata;
    }>;
}
export type FeeEstimationV1<T> = {
    unit: WEI;
    maxFee: T;
    overallFee: T;
    gasPrice: T;
    gasUsage: T;
};
export type FeeEstimationV3<T> = {
    unit: FRI;
    overallFee: T;
    gasPrice: T;
    gasUsage: T;
    maxAmount: T;
    maxPricePerUnit: T;
};
export type CastFeeEstimation<T> = FeeEstimationV1<T> | FeeEstimationV3<T>;
