import { hash as s, uint256 as d } from "starknet";
import { addressSchema as c } from "../chains/starknet/address.js";
const f = {
  Transfer: s.getSelectorFromName("Transfer"),
  // 0x99cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9
  Approval: s.getSelectorFromName("Approval")
  // 0x134692b230b9e1ffa39098904722134159652b09c5bc41d88d6698779d228ff
}, p = (i, e, o) => {
  for (const r of i) {
    const { events: l, internal_calls: a } = r;
    for (const t of l)
      for (const n of t.keys)
        n === f.Approval && e.push({
          tokenAddress: c.parse(r.contract_address),
          owner: t.data[0],
          spender: t.data[1],
          value: d.uint256ToBN({ low: t.data[2], high: t.data[3] }).toString()
        }), n === f.Transfer && o.push({
          tokenAddress: c.parse(r.contract_address),
          from: t.data[0],
          to: t.data[1],
          value: d.uint256ToBN({ low: t.data[2], high: t.data[3] }).toString()
        });
    a && p(a, e, o);
  }
  return { approvals: e, transfers: o };
};
export {
  f as EventsBySelector,
  p as findTransfersAndApprovals
};
