"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const o=require("url-join"),c=require("./schema.cjs"),u=require("../http/HttpService.cjs");class h{constructor(s,r){this.apiBase=s,this.headers=r,this.httpService=new u.HTTPService(this.headers,"json")}async getAddressFromMultipleStarknetId(s,r,t){const e=new URLSearchParams(r.map(d=>["domain",d]));t&&e.set("includeAvatar","true");const n=o(this.apiBase,s,"starknet.id",`?${e}`),a=await this.httpService.get(n),i=c.nameResolutionStarknetIdsSchema.safeParse(a);if(!i.success)throw new Error("Failed to parse name resolution");return i.data}async getAddressFromStarknetId(s,r,t){const e=o(this.apiBase,s,"starknet.id",r,t?"?includeAvatar=true":""),n=await this.httpService.get(e),a=c.nameResolutionStarknetIdSchema.safeParse(n);if(!a.success)throw new Error("Failed to parse name resolution");return a.data}async getStarknetIdFromAddress(s,r,t){const e=new URLSearchParams(r.map(d=>["address",d]));t&&e.set("includeAvatar","true");const n=o(this.apiBase,s,"addresses",`?${e}`),a=await this.httpService.get(n),i=c.nameResolutionAddressesSchema.safeParse(a);if(!i.success)throw new Error("Failed to parse name resolution");return i.data}async getProvidersNames(s){const r=o(this.apiBase,s,"providers","name"),t=await this.httpService.get(r),e=c.providersNamesSchema.safeParse(t);if(!e.success)throw new Error("Failed to parse name resolution");return e.data}}exports.ResolveNameService=h;
