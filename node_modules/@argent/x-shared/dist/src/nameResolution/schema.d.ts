import { default as z } from 'zod';
export declare const nameResolutionStarknetIdSchema: z.ZodObject<{
    domain: z.ZodString;
    address: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    avatar: z.ZodOptional<z.ZodString>;
    status: z.ZodUnion<[z.ZodLiteral<"KNOWN">, z.ZodLiteral<"UNKNOWN">]>;
}, "strip", z.ZodTypeAny, {
    status: "KNOWN" | "UNKNOWN";
    domain: string;
    address?: `0x${string}` | undefined;
    avatar?: string | undefined;
}, {
    status: "KNOWN" | "UNKNOWN";
    domain: string;
    address?: string | undefined;
    avatar?: string | undefined;
}>;
export declare const nameResolutionStarknetIdsSchema: z.ZodArray<z.ZodObject<{
    domain: z.ZodString;
    address: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    avatar: z.ZodOptional<z.ZodString>;
    status: z.ZodUnion<[z.ZodLiteral<"KNOWN">, z.ZodLiteral<"UNKNOWN">]>;
}, "strip", z.ZodTypeAny, {
    status: "KNOWN" | "UNKNOWN";
    domain: string;
    address?: `0x${string}` | undefined;
    avatar?: string | undefined;
}, {
    status: "KNOWN" | "UNKNOWN";
    domain: string;
    address?: string | undefined;
    avatar?: string | undefined;
}>, "many">;
export declare const nameProviderResolutionSchema: z.ZodObject<{
    provider: z.ZodString;
    name: z.ZodString;
    avatar: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    provider: string;
    avatar?: string | undefined;
}, {
    name: string;
    provider: string;
    avatar?: string | undefined;
}>;
export declare const nameResolutionAddressSchema: z.ZodObject<{
    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    status: z.ZodUnion<[z.ZodLiteral<"KNOWN">, z.ZodLiteral<"UNKNOWN">]>;
    resolutions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        name: z.ZodString;
        avatar: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }, {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    address: `0x${string}`;
    status: "KNOWN" | "UNKNOWN";
    resolutions?: {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }[] | undefined;
}, {
    address: string;
    status: "KNOWN" | "UNKNOWN";
    resolutions?: {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }[] | undefined;
}>;
export declare const providersNamesSchema: z.ZodArray<z.ZodString, "many">;
export declare const nameResolutionAddressesSchema: z.ZodArray<z.ZodObject<{
    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    status: z.ZodUnion<[z.ZodLiteral<"KNOWN">, z.ZodLiteral<"UNKNOWN">]>;
    resolutions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        provider: z.ZodString;
        name: z.ZodString;
        avatar: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }, {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    address: `0x${string}`;
    status: "KNOWN" | "UNKNOWN";
    resolutions?: {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }[] | undefined;
}, {
    address: string;
    status: "KNOWN" | "UNKNOWN";
    resolutions?: {
        name: string;
        provider: string;
        avatar?: string | undefined;
    }[] | undefined;
}>, "many">;
export type NameResolutionStarknetId = z.infer<typeof nameResolutionStarknetIdSchema>;
export type NameResolutionStarknetIds = z.infer<typeof nameResolutionStarknetIdsSchema>;
export type NameResolutionAddress = z.infer<typeof nameResolutionAddressSchema>;
export type ProvidersNames = z.infer<typeof providersNamesSchema>;
export type NameProviderResolution = z.infer<typeof nameProviderResolutionSchema>;
