import { z } from 'zod';
export declare const SwapDataSchema: z.ZodObject<{
    quoteId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    quoteId: string;
}, {
    quoteId: string;
}>;
export declare const SwapQuoteRouteSchema: z.ZodSchema;
export type SwapQuoteRoute = z.infer<typeof SwapQuoteRouteSchema>;
export declare const SwapQuoteResponseSchema: z.ZodObject<{
    sellToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    sellAmount: z.ZodString;
    sellAmountInCurrency: z.ZodString;
    buyToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    buyAmount: z.ZodString;
    buyAmountInCurrency: z.ZodString;
    expiresAt: z.ZodNumber;
    expiresIn: z.ZodNumber;
    dexCount: z.ZodNumber;
    routes: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
    providerName: z.ZodString;
    providerFee: z.ZodString;
    providerFeeInCurrency: z.ZodString;
    providerFeePercentage: z.ZodNumber;
    argentFee: z.ZodString;
    argentFeeInCurrency: z.ZodString;
    argentFeePercentage: z.ZodNumber;
    feeToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    data: z.ZodObject<{
        quoteId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        quoteId: string;
    }, {
        quoteId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        quoteId: string;
    };
    feeToken: `0x${string}`;
    argentFee: string;
    providerFee: string;
    sellToken: `0x${string}`;
    buyToken: `0x${string}`;
    routes: any[];
    sellAmount: string;
    sellAmountInCurrency: string;
    buyAmount: string;
    buyAmountInCurrency: string;
    expiresAt: number;
    expiresIn: number;
    dexCount: number;
    providerName: string;
    providerFeeInCurrency: string;
    providerFeePercentage: number;
    argentFeeInCurrency: string;
    argentFeePercentage: number;
}, {
    data: {
        quoteId: string;
    };
    feeToken: string;
    argentFee: string;
    providerFee: string;
    sellToken: string;
    buyToken: string;
    routes: any[];
    sellAmount: string;
    sellAmountInCurrency: string;
    buyAmount: string;
    buyAmountInCurrency: string;
    expiresAt: number;
    expiresIn: number;
    dexCount: number;
    providerName: string;
    providerFeeInCurrency: string;
    providerFeePercentage: number;
    argentFeeInCurrency: string;
    argentFeePercentage: number;
}>;
export type SwapQuoteResponse = z.infer<typeof SwapQuoteResponseSchema>;
