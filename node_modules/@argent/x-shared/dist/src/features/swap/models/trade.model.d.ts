import { z } from 'zod';
export declare enum TradeType {
    EXACT_PAY = "EXACT_PAY",
    EXACT_RECEIVE = "EXACT_RECEIVE"
}
export declare const TradeTypeSchema: z.ZodNativeEnum<typeof TradeType>;
export declare const TradeSchema: z.ZodObject<{
    payToken: z.ZodObject<z.objectUtil.extendShape<{
        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        networkId: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodNumber>;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        decimals: z.ZodOptional<z.ZodNumber>;
        iconUrl: z.ZodUnion<[z.ZodOptional<z.ZodString>, z.ZodLiteral<"">]>;
        pricingId: z.ZodOptional<z.ZodNumber>;
        category: z.ZodOptional<z.ZodString>;
        dappId: z.ZodOptional<z.ZodString>;
        brandColor: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        address: `0x${string}`;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    }, {
        address: string;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    }>;
    receiveToken: z.ZodObject<z.objectUtil.extendShape<{
        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        networkId: z.ZodString;
    }, {
        id: z.ZodOptional<z.ZodNumber>;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        decimals: z.ZodOptional<z.ZodNumber>;
        iconUrl: z.ZodUnion<[z.ZodOptional<z.ZodString>, z.ZodLiteral<"">]>;
        pricingId: z.ZodOptional<z.ZodNumber>;
        category: z.ZodOptional<z.ZodString>;
        dappId: z.ZodOptional<z.ZodString>;
        brandColor: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        address: `0x${string}`;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    }, {
        address: string;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    }>;
    tradeType: z.ZodDefault<z.ZodNativeEnum<typeof TradeType>>;
    payAmount: z.ZodString;
    receiveAmount: z.ZodString;
    payAmountInCurrency: z.ZodString;
    receiveAmountInCurrency: z.ZodString;
    totalFee: z.ZodString;
    totalFeeInCurrency: z.ZodOptional<z.ZodString>;
    totalFeePercentage: z.ZodNumber;
    expiresAt: z.ZodNumber;
    expiresIn: z.ZodNumber;
    route: z.ZodType<any, z.ZodTypeDef, any>;
    data: z.ZodObject<{
        quoteId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        quoteId: string;
    }, {
        quoteId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        quoteId: string;
    };
    totalFee: string;
    expiresAt: number;
    expiresIn: number;
    payToken: {
        address: `0x${string}`;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    };
    receiveToken: {
        address: `0x${string}`;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    };
    tradeType: TradeType;
    payAmount: string;
    receiveAmount: string;
    payAmountInCurrency: string;
    receiveAmountInCurrency: string;
    totalFeePercentage: number;
    totalFeeInCurrency?: string | undefined;
    route?: any;
}, {
    data: {
        quoteId: string;
    };
    totalFee: string;
    expiresAt: number;
    expiresIn: number;
    payToken: {
        address: string;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    };
    receiveToken: {
        address: string;
        networkId: string;
        symbol?: string | undefined;
        name?: string | undefined;
        decimals?: number | undefined;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        id?: number | undefined;
        iconUrl?: string | undefined;
        category?: string | undefined;
        pricingId?: number | undefined;
    };
    payAmount: string;
    receiveAmount: string;
    payAmountInCurrency: string;
    receiveAmountInCurrency: string;
    totalFeePercentage: number;
    tradeType?: TradeType | undefined;
    totalFeeInCurrency?: string | undefined;
    route?: any;
}>;
export type Trade = z.infer<typeof TradeSchema>;
export type TradeAmounts = Pick<Trade, "payAmount" | "receiveAmount">;
