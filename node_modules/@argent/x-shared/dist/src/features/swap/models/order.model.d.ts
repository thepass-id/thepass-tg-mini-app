import { z } from 'zod';
export declare const SwapOrderRequestSchema: z.ZodObject<{
    chain: z.ZodLiteral<"starknet">;
    sellToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    buyToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    sellAmount: z.ZodString;
    buyAmount: z.ZodString;
    accountAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    slippage: z.ZodEffects<z.ZodNumber, string, number>;
    data: z.ZodObject<{
        quoteId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        quoteId: string;
    }, {
        quoteId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    chain: "starknet";
    accountAddress: `0x${string}`;
    data: {
        quoteId: string;
    };
    sellToken: `0x${string}`;
    buyToken: `0x${string}`;
    sellAmount: string;
    buyAmount: string;
    slippage: string;
}, {
    chain: "starknet";
    accountAddress: string;
    data: {
        quoteId: string;
    };
    sellToken: string;
    buyToken: string;
    sellAmount: string;
    buyAmount: string;
    slippage: number;
}>;
export type SwapOrderRequest = z.infer<typeof SwapOrderRequestSchema>;
export declare const SwapOrderResponseSchema: z.ZodObject<{
    calls: z.ZodArray<z.ZodType<import('starknet').Call, z.ZodTypeDef, import('starknet').Call>, "many">;
}, "strip", z.ZodTypeAny, {
    calls: import('starknet').Call[];
}, {
    calls: import('starknet').Call[];
}>;
export type SwapOrderResponse = z.infer<typeof SwapOrderResponseSchema>;
