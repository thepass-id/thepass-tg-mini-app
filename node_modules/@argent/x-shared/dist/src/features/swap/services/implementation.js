import p from "url-join";
import { SwapError as a } from "../../../errors/swap.js";
import { SwapQuoteResponseSchema as i } from "../models/quote.model.js";
import { calculateTotalFee as u } from "../utils/totalFee.js";
import { TradeSchema as m } from "../models/trade.model.js";
import { SwapOrderRequestSchema as l, SwapOrderResponseSchema as S } from "../models/order.model.js";
import { urlWithQuery as y } from "../../../utils/url/urlWithQuery.js";
class _ {
  constructor(e, r) {
    if (this.httpService = e, !r)
      throw new a({ code: "NO_SWAP_URL" });
    this.swapQuoteUrl = p(r, "/quote"), this.swapOrderUrl = p(r, "/order");
  }
  async getSwapQuoteForPay(e, r, o, n, t = "USD") {
    const s = y(this.swapQuoteUrl, {
      accountAddress: n,
      currency: t,
      chain: "starknet",
      sellToken: e,
      buyToken: r,
      sellAmount: o
    });
    try {
      const c = await this.httpService.get(s);
      return await i.parseAsync(c);
    } catch (c) {
      throw console.error(c), new a({ code: "INVALID_QUOTE_RESPONSE" });
    }
  }
  async getSwapTradeFromQuote(e, r, o) {
    if (!r || !o)
      throw new a({ code: "INVALID_SWAP_TOKENS" });
    const { totalFee: n, totalFeeInCurrency: t, totalFeePercentage: s } = u(e);
    return m.parse({
      payToken: r,
      receiveToken: o,
      payAmount: e.sellAmount,
      receiveAmount: e.buyAmount,
      payAmountInCurrency: e.sellAmountInCurrency,
      receiveAmountInCurrency: e.buyAmountInCurrency,
      totalFee: n,
      totalFeeInCurrency: t,
      totalFeePercentage: s,
      expiresAt: e.expiresAt,
      expiresIn: e.expiresIn,
      route: e.routes[0],
      data: e.data
    });
  }
  async getSwapOrderFromTrade(e, r, o) {
    const n = l.parse({
      chain: "starknet",
      sellToken: r.payToken.address,
      buyToken: r.receiveToken.address,
      sellAmount: r.payAmount,
      buyAmount: r.receiveAmount,
      accountAddress: e,
      slippage: o / 1e4,
      data: r.data
    });
    try {
      const t = await this.httpService.post(this.swapOrderUrl, {
        body: JSON.stringify(n),
        headers: {
          "Content-Type": "application/json"
        }
      });
      return await S.parseAsync(t);
    } catch (t) {
      throw console.error(t), new a({ code: "INVALID_SWAP_ORDER_RESPONSE" });
    }
  }
}
export {
  _ as SharedSwapService
};
