import { z } from 'zod';
export declare const estimatedFeeSchema: z.ZodObject<{
    feeTokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    amount: z.ZodBigInt;
    pricePerUnit: z.ZodBigInt;
    max: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        amount: z.ZodBigInt;
        pricePerUnit: z.ZodBigInt;
    }, "strip", z.ZodTypeAny, {
        amount: bigint;
        pricePerUnit: bigint;
    }, {
        amount: bigint;
        pricePerUnit: bigint;
    }>, z.ZodObject<{
        maxFee: z.ZodBigInt;
    }, "strip", z.ZodTypeAny, {
        maxFee: bigint;
    }, {
        maxFee: bigint;
    }>]>>;
    dataGasConsumed: z.ZodOptional<z.ZodBigInt>;
    dataGasPrice: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, {
    amount: bigint;
    pricePerUnit: bigint;
    feeTokenAddress: `0x${string}`;
    max?: {
        amount: bigint;
        pricePerUnit: bigint;
    } | {
        maxFee: bigint;
    } | undefined;
    dataGasConsumed?: bigint | undefined;
    dataGasPrice?: bigint | undefined;
}, {
    amount: bigint;
    pricePerUnit: bigint;
    feeTokenAddress: string;
    max?: {
        amount: bigint;
        pricePerUnit: bigint;
    } | {
        maxFee: bigint;
    } | undefined;
    dataGasConsumed?: bigint | undefined;
    dataGasPrice?: bigint | undefined;
}>;
export type EstimatedFee = z.infer<typeof estimatedFeeSchema>;
export declare const estimatedFeesSchema: z.ZodObject<{
    deployment: z.ZodOptional<z.ZodObject<{
        feeTokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        amount: z.ZodBigInt;
        pricePerUnit: z.ZodBigInt;
        max: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            amount: z.ZodBigInt;
            pricePerUnit: z.ZodBigInt;
        }, "strip", z.ZodTypeAny, {
            amount: bigint;
            pricePerUnit: bigint;
        }, {
            amount: bigint;
            pricePerUnit: bigint;
        }>, z.ZodObject<{
            maxFee: z.ZodBigInt;
        }, "strip", z.ZodTypeAny, {
            maxFee: bigint;
        }, {
            maxFee: bigint;
        }>]>>;
        dataGasConsumed: z.ZodOptional<z.ZodBigInt>;
        dataGasPrice: z.ZodOptional<z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: `0x${string}`;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    }, {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: string;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    }>>;
    transactions: z.ZodObject<{
        feeTokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        amount: z.ZodBigInt;
        pricePerUnit: z.ZodBigInt;
        max: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            amount: z.ZodBigInt;
            pricePerUnit: z.ZodBigInt;
        }, "strip", z.ZodTypeAny, {
            amount: bigint;
            pricePerUnit: bigint;
        }, {
            amount: bigint;
            pricePerUnit: bigint;
        }>, z.ZodObject<{
            maxFee: z.ZodBigInt;
        }, "strip", z.ZodTypeAny, {
            maxFee: bigint;
        }, {
            maxFee: bigint;
        }>]>>;
        dataGasConsumed: z.ZodOptional<z.ZodBigInt>;
        dataGasPrice: z.ZodOptional<z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: `0x${string}`;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    }, {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: string;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    transactions: {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: `0x${string}`;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    };
    deployment?: {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: `0x${string}`;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    } | undefined;
}, {
    transactions: {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: string;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    };
    deployment?: {
        amount: bigint;
        pricePerUnit: bigint;
        feeTokenAddress: string;
        max?: {
            amount: bigint;
            pricePerUnit: bigint;
        } | {
            maxFee: bigint;
        } | undefined;
        dataGasConsumed?: bigint | undefined;
        dataGasPrice?: bigint | undefined;
    } | undefined;
}>;
export type EstimatedFees = z.infer<typeof estimatedFeesSchema>;
export interface EstimatedFeesEnriched extends EstimatedFees {
    id: string;
    timestamp: number;
}
