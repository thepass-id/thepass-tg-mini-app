import { z } from 'zod';
export declare const activityTransferSchema: z.ZodObject<{
    type: z.ZodEnum<["payment", "gasFee"]>;
    leg: z.ZodEnum<["credit", "debit"]>;
    asset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    counterParty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    counterPartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
}, "strip", z.ZodTypeAny, {
    type: "payment" | "gasFee";
    leg: "credit" | "debit";
    asset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterParty?: `0x${string}` | undefined;
    counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}, {
    type: "payment" | "gasFee";
    leg: "credit" | "debit";
    asset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterParty?: string | undefined;
    counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}>;
declare const detailsActionSchema: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
export declare const activityDetailsSchema: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"deploy">;
    deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
}, "strip", z.ZodTypeAny, {
    type: "deploy";
    contractAddress: `0x${string}`;
    deployer: `0x${string}`;
}, {
    type: "deploy";
    contractAddress: string;
    deployer: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"approval">;
    spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    asset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    approvalType: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "approval";
    spender: `0x${string}`;
    asset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    approvalType: string;
}, {
    type: "approval";
    spender: string;
    asset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    approvalType: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"payment">;
    counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    leg: z.ZodString;
    asset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
}, "strip", z.ZodTypeAny, {
    type: "payment";
    leg: string;
    asset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty: `0x${string}`;
    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}, {
    type: "payment";
    leg: string;
    asset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty: string;
    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"trade">;
    srcAsset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    destAsset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "trade";
    srcAsset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    destAsset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
}, {
    type: "trade";
    srcAsset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    destAsset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"security">;
    action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
    context: z.ZodOptional<z.ZodObject<{
        activeAt: z.ZodOptional<z.ZodString>;
        newGuardian: z.ZodOptional<z.ZodString>;
        newImplementation: z.ZodOptional<z.ZodString>;
        newVersion: z.ZodOptional<z.ZodString>;
        signerGuid: z.ZodOptional<z.ZodString>;
        signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            guid: z.ZodOptional<z.ZodString>;
            signerType: z.ZodOptional<z.ZodString>;
            signer: z.ZodOptional<z.ZodObject<{
                publicKey: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                publicKey?: string | undefined;
            }, {
                publicKey?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }, {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        activeAt?: string | undefined;
        newGuardian?: string | undefined;
        newImplementation?: string | undefined;
        newVersion?: string | undefined;
        signerGuid?: string | undefined;
        signers?: {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }[] | undefined;
    }, {
        activeAt?: string | undefined;
        newGuardian?: string | undefined;
        newImplementation?: string | undefined;
        newVersion?: string | undefined;
        signerGuid?: string | undefined;
        signers?: {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "security";
    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
    context?: {
        activeAt?: string | undefined;
        newGuardian?: string | undefined;
        newImplementation?: string | undefined;
        newVersion?: string | undefined;
        signerGuid?: string | undefined;
        signers?: {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }[] | undefined;
    } | undefined;
}, {
    type: "security";
    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
    context?: {
        activeAt?: string | undefined;
        newGuardian?: string | undefined;
        newImplementation?: string | undefined;
        newVersion?: string | undefined;
        signerGuid?: string | undefined;
        signers?: {
            guid?: string | undefined;
            signerType?: string | undefined;
            signer?: {
                publicKey?: string | undefined;
            } | undefined;
        }[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"dappInteraction">;
    dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        parameters?: unknown[] | undefined;
    }, {
        name: string;
        parameters?: unknown[] | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    type: "dappInteraction";
    dappAddress: `0x${string}`;
    function?: {
        name: string;
        parameters?: unknown[] | undefined;
    } | null | undefined;
}, {
    type: "dappInteraction";
    dappAddress: string;
    function?: {
        name: string;
        parameters?: unknown[] | undefined;
    } | null | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"staking">;
    stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
    counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    asset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    stakerInfo: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        iconUrl: z.ZodOptional<z.ZodString>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }, {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "staking";
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
    asset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty: `0x${string}`;
}, {
    type: "staking";
    stakerInfo: {
        name?: string | undefined;
        address?: string | undefined;
        iconUrl?: string | undefined;
    };
    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
    asset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"gift">;
    counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    leg: z.ZodString;
    asset: z.ZodObject<{
        type: z.ZodEnum<["token", "nft"]>;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
    counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
}, "strip", z.ZodTypeAny, {
    type: "gift";
    leg: string;
    asset: {
        type: "nft" | "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty?: `0x${string}` | undefined;
    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}, {
    type: "gift";
    leg: string;
    asset: {
        type: "nft" | "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
    counterparty?: string | undefined;
    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"multicall">;
    calls: z.ZodArray<z.ZodObject<{
        details: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"deploy">;
            deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        }, {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"approval">;
            spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            approvalType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        }, {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"payment">;
            counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            leg: z.ZodString;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }, {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"trade">;
            srcAsset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            destAsset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }, {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"security">;
            action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
            context: z.ZodOptional<z.ZodObject<{
                activeAt: z.ZodOptional<z.ZodString>;
                newGuardian: z.ZodOptional<z.ZodString>;
                newImplementation: z.ZodOptional<z.ZodString>;
                newVersion: z.ZodOptional<z.ZodString>;
                signerGuid: z.ZodOptional<z.ZodString>;
                signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    guid: z.ZodOptional<z.ZodString>;
                    signerType: z.ZodOptional<z.ZodString>;
                    signer: z.ZodOptional<z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }, {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            }, {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        }, {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"dappInteraction">;
            dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                parameters?: unknown[] | undefined;
            }, {
                name: string;
                parameters?: unknown[] | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        }, {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"staking">;
            stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
            counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        }, {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"gift">;
            counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
            leg: z.ZodString;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }, {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        details: {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        } | {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        };
    }, {
        details: {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        } | {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        };
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "multicall";
    calls: {
        details: {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        } | {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        };
    }[];
}, {
    type: "multicall";
    calls: {
        details: {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        } | {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        };
    }[];
}>]>;
export declare const activityDappSchema: z.ZodObject<{
    dappId: z.ZodString;
    name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    dappId: string;
    name?: string | null | undefined;
}, {
    dappId: string;
    name?: string | null | undefined;
}>;
export type ActivityDapp = z.infer<typeof activityDappSchema>;
export type ActivityDetails = z.infer<typeof activityDetailsSchema>;
export declare const activitySummarySchema: z.ZodObject<{
    sent: z.ZodBoolean;
    asset: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"nft">;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        tokenId: z.ZodOptional<z.ZodNumber>;
        amount: z.ZodOptional<z.ZodString>;
        collectionName: z.ZodOptional<z.ZodString>;
        collectionPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        nftName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        nftPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "nft";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        tokenId?: number | undefined;
        collectionName?: string | undefined;
        collectionPreviewImage?: string | null | undefined;
        nftName?: string | null | undefined;
        nftPreviewImage?: string | null | undefined;
    }, {
        type: "nft";
        tokenAddress: string;
        amount?: string | undefined;
        tokenId?: number | undefined;
        collectionName?: string | undefined;
        collectionPreviewImage?: string | null | undefined;
        nftName?: string | null | undefined;
        nftPreviewImage?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"token">;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: string;
        }, {
            currency: string;
            currencyAmount: string;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: string;
        } | null | undefined;
    }, {
        type: "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: string;
        } | null | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    sent: boolean;
    asset: {
        type: "nft";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        tokenId?: number | undefined;
        collectionName?: string | undefined;
        collectionPreviewImage?: string | null | undefined;
        nftName?: string | null | undefined;
        nftPreviewImage?: string | null | undefined;
    } | {
        type: "token";
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: string;
        } | null | undefined;
    };
}, {
    sent: boolean;
    asset: {
        type: "nft";
        tokenAddress: string;
        amount?: string | undefined;
        tokenId?: number | undefined;
        collectionName?: string | undefined;
        collectionPreviewImage?: string | null | undefined;
        nftName?: string | null | undefined;
        nftPreviewImage?: string | null | undefined;
    } | {
        type: "token";
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: string;
        } | null | undefined;
    };
}>;
export declare const feeSchema: z.ZodObject<{
    type: z.ZodString;
    to: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    actualFee: z.ZodObject<{
        type: z.ZodString;
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            currency: z.ZodString;
            currencyAmount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            currencyAmount: number;
        }, {
            currency: string;
            currencyAmount: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }, {
        type: string;
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: string;
    to: `0x${string}`;
    actualFee: {
        type: string;
        tokenAddress: `0x${string}`;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
}, {
    type: string;
    to: string;
    actualFee: {
        type: string;
        tokenAddress: string;
        amount?: string | undefined;
        fiatAmount?: {
            currency: string;
            currencyAmount: number;
        } | null | undefined;
    };
}>;
export declare const activitySchema: z.ZodObject<{
    compositeId: z.ZodString;
    id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "failure"]>;
    wallet: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    txSender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    source: z.ZodString;
    type: z.ZodEnum<["approval", "changePubKey", "dappInteraction", "deploy", "gift", "multicall", "payment", "security", "trade", "staking"]>; /** TODO: this schema could be further narrowed - this type will be equal to details.type */
    group: z.ZodEnum<["finance", "security"]>;
    submitted: z.ZodNumber;
    lastModified: z.ZodNumber;
    transaction: z.ZodObject<{
        network: z.ZodString;
        hash: z.ZodString;
        status: z.ZodString;
        blockNumber: z.ZodOptional<z.ZodNumber>;
        transactionIndex: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }>;
    transfers: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["payment", "gasFee"]>;
        leg: z.ZodEnum<["credit", "debit"]>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterParty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        counterPartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: `0x${string}` | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: string | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, "many">;
    fees: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        to: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        actualFee: z.ZodObject<{
            type: z.ZodString;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, "many">>;
    relatedAddresses: z.ZodNullable<z.ZodArray<z.ZodObject<{
        address: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        network: z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>;
        type: z.ZodEnum<["wallet", "token"]>;
    }, "strip", z.ZodTypeAny, {
        address: `0x${string}`;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }, {
        address: string;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }>, "many">>;
    network: z.ZodString;
    networkDetails: z.ZodOptional<z.ZodObject<{
        chainId: z.ZodEnum<["TESTNET", "MAINNET", "SEPOLIA"]>;
        ethereumNetwork: z.ZodEnum<["mainnet", "sepolia"]>;
    }, "strip", z.ZodTypeAny, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }>>;
    details: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"deploy">;
        deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        type: "deploy";
        contractAddress: `0x${string}`;
        deployer: `0x${string}`;
    }, {
        type: "deploy";
        contractAddress: string;
        deployer: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"approval">;
        spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        approvalType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "approval";
        spender: `0x${string}`;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }, {
        type: "approval";
        spender: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"payment">;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"trade">;
        srcAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        destAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"security">;
        action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
        context: z.ZodOptional<z.ZodObject<{
            activeAt: z.ZodOptional<z.ZodString>;
            newGuardian: z.ZodOptional<z.ZodString>;
            newImplementation: z.ZodOptional<z.ZodString>;
            newVersion: z.ZodOptional<z.ZodString>;
            signerGuid: z.ZodOptional<z.ZodString>;
            signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                guid: z.ZodOptional<z.ZodString>;
                signerType: z.ZodOptional<z.ZodString>;
                signer: z.ZodOptional<z.ZodObject<{
                    publicKey: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    publicKey?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"dappInteraction">;
        dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            parameters?: unknown[] | undefined;
        }, {
            name: string;
            parameters?: unknown[] | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "dappInteraction";
        dappAddress: `0x${string}`;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }, {
        type: "dappInteraction";
        dappAddress: string;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"staking">;
        stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
    }, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"gift">;
        counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: `0x${string}` | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: string | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>]>, z.ZodObject<{
        type: z.ZodLiteral<"multicall">;
        calls: z.ZodArray<z.ZodObject<{
            details: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"deploy">;
                deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            }, {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"approval">;
                spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                approvalType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }, {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"payment">;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"trade">;
                srcAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                destAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"security">;
                action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
                context: z.ZodOptional<z.ZodObject<{
                    activeAt: z.ZodOptional<z.ZodString>;
                    newGuardian: z.ZodOptional<z.ZodString>;
                    newImplementation: z.ZodOptional<z.ZodString>;
                    newVersion: z.ZodOptional<z.ZodString>;
                    signerGuid: z.ZodOptional<z.ZodString>;
                    signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        guid: z.ZodOptional<z.ZodString>;
                        signerType: z.ZodOptional<z.ZodString>;
                        signer: z.ZodOptional<z.ZodObject<{
                            publicKey: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            publicKey?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"dappInteraction">;
                dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    name: z.ZodString;
                    parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }, {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"staking">;
                stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            }, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"gift">;
                counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }, {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }>]>;
    transferSummary: z.ZodOptional<z.ZodArray<z.ZodObject<{
        sent: z.ZodBoolean;
        asset: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            tokenId: z.ZodOptional<z.ZodNumber>;
            amount: z.ZodOptional<z.ZodString>;
            collectionName: z.ZodOptional<z.ZodString>;
            collectionPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }, {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: string;
            }, {
                currency: string;
                currencyAmount: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }, {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }>, "many">>;
    dapp: z.ZodOptional<z.ZodObject<{
        dappId: z.ZodString;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dappId: string;
        name?: string | null | undefined;
    }, {
        dappId: string;
        name?: string | null | undefined;
    }>>;
    actions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        properties: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">;
        defaultProperties: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }>, "many">>;
    title: z.ZodOptional<z.ZodString>;
    multisigDetails: z.ZodOptional<z.ZodObject<{
        signers: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        signers: `0x${string}`[];
    }, {
        signers: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "success" | "failure";
    type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
    network: string;
    wallet: `0x${string}`;
    id: string;
    group: "security" | "finance";
    details: {
        type: "deploy";
        contractAddress: `0x${string}`;
        deployer: `0x${string}`;
    } | {
        type: "approval";
        spender: `0x${string}`;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    } | {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    } | {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } | {
        type: "dappInteraction";
        dappAddress: `0x${string}`;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    } | {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
    } | {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: `0x${string}` | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    };
    transfers: {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: `0x${string}` | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }[];
    compositeId: string;
    txSender: `0x${string}`;
    source: string;
    submitted: number;
    lastModified: number;
    transaction: {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    };
    relatedAddresses: {
        address: `0x${string}`;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }[] | null;
    fees?: {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    networkDetails?: {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    } | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        dappId: string;
        name?: string | null | undefined;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    title?: string | undefined;
    multisigDetails?: {
        signers: `0x${string}`[];
    } | undefined;
}, {
    status: "pending" | "success" | "failure";
    type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
    network: string;
    wallet: string;
    id: string;
    group: "security" | "finance";
    details: {
        type: "deploy";
        contractAddress: string;
        deployer: string;
    } | {
        type: "approval";
        spender: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    } | {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    } | {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } | {
        type: "dappInteraction";
        dappAddress: string;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    } | {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
    } | {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: string | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    };
    transfers: {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: string | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }[];
    compositeId: string;
    txSender: string;
    source: string;
    submitted: number;
    lastModified: number;
    transaction: {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    };
    relatedAddresses: {
        address: string;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }[] | null;
    fees?: {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    networkDetails?: {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    } | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        dappId: string;
        name?: string | null | undefined;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    title?: string | undefined;
    multisigDetails?: {
        signers: string[];
    } | undefined;
}>;
export type Activity = z.infer<typeof activitySchema>;
/** 'native' is an activity originating within individual product, e.g. not created by dapp */
export declare const nativeActivityMetaSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    shortTitle: z.ZodOptional<z.ZodString>;
    subtitle: z.ZodOptional<z.ZodString>;
    /** let's not import the keys from x-ui here */
    icon: z.ZodOptional<z.ZodString>;
    investment: z.ZodOptional<z.ZodObject<{
        useFullBalance: z.ZodOptional<z.ZodBoolean>;
        subsequentTransaction: z.ZodOptional<z.ZodBoolean>;
        investmentId: z.ZodOptional<z.ZodString>;
        stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        tokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        amount: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        amount: string;
        tokenAddress: `0x${string}`;
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        investmentId?: string | undefined;
        useFullBalance?: boolean | undefined;
        subsequentTransaction?: boolean | undefined;
    }, {
        amount: string;
        tokenAddress: string;
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        investmentId?: string | undefined;
        useFullBalance?: boolean | undefined;
        subsequentTransaction?: boolean | undefined;
    }>>;
    isExecuteFromOutside: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    icon?: string | undefined;
    title?: string | undefined;
    shortTitle?: string | undefined;
    subtitle?: string | undefined;
    investment?: {
        amount: string;
        tokenAddress: `0x${string}`;
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        investmentId?: string | undefined;
        useFullBalance?: boolean | undefined;
        subsequentTransaction?: boolean | undefined;
    } | undefined;
    isExecuteFromOutside?: boolean | undefined;
}, {
    icon?: string | undefined;
    title?: string | undefined;
    shortTitle?: string | undefined;
    subtitle?: string | undefined;
    investment?: {
        amount: string;
        tokenAddress: string;
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        investmentId?: string | undefined;
        useFullBalance?: boolean | undefined;
        subsequentTransaction?: boolean | undefined;
    } | undefined;
    isExecuteFromOutside?: boolean | undefined;
}>;
export type NativeActivityMeta = z.infer<typeof nativeActivityMetaSchema>;
export declare const NativeActivityTypeNative = "native";
export declare const NativeActivityStatusRejected = "rejected";
export declare const NativeActivityStatusCancelled = "cancelled";
export declare const NativeActivityStatusQueued = "queued";
export declare const nativeActivitySchema: z.ZodObject<z.objectUtil.extendShape<Pick<{
    compositeId: z.ZodString;
    id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "failure"]>;
    wallet: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    txSender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    source: z.ZodString;
    type: z.ZodEnum<["approval", "changePubKey", "dappInteraction", "deploy", "gift", "multicall", "payment", "security", "trade", "staking"]>; /** TODO: this schema could be further narrowed - this type will be equal to details.type */
    group: z.ZodEnum<["finance", "security"]>;
    submitted: z.ZodNumber;
    lastModified: z.ZodNumber;
    transaction: z.ZodObject<{
        network: z.ZodString;
        hash: z.ZodString;
        status: z.ZodString;
        blockNumber: z.ZodOptional<z.ZodNumber>;
        transactionIndex: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }>;
    transfers: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["payment", "gasFee"]>;
        leg: z.ZodEnum<["credit", "debit"]>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterParty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        counterPartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: `0x${string}` | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: string | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, "many">;
    fees: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        to: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        actualFee: z.ZodObject<{
            type: z.ZodString;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, "many">>;
    relatedAddresses: z.ZodNullable<z.ZodArray<z.ZodObject<{
        address: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        network: z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>;
        type: z.ZodEnum<["wallet", "token"]>;
    }, "strip", z.ZodTypeAny, {
        address: `0x${string}`;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }, {
        address: string;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }>, "many">>;
    network: z.ZodString;
    networkDetails: z.ZodOptional<z.ZodObject<{
        chainId: z.ZodEnum<["TESTNET", "MAINNET", "SEPOLIA"]>;
        ethereumNetwork: z.ZodEnum<["mainnet", "sepolia"]>;
    }, "strip", z.ZodTypeAny, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }>>;
    details: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"deploy">;
        deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        type: "deploy";
        contractAddress: `0x${string}`;
        deployer: `0x${string}`;
    }, {
        type: "deploy";
        contractAddress: string;
        deployer: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"approval">;
        spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        approvalType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "approval";
        spender: `0x${string}`;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }, {
        type: "approval";
        spender: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"payment">;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"trade">;
        srcAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        destAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"security">;
        action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
        context: z.ZodOptional<z.ZodObject<{
            activeAt: z.ZodOptional<z.ZodString>;
            newGuardian: z.ZodOptional<z.ZodString>;
            newImplementation: z.ZodOptional<z.ZodString>;
            newVersion: z.ZodOptional<z.ZodString>;
            signerGuid: z.ZodOptional<z.ZodString>;
            signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                guid: z.ZodOptional<z.ZodString>;
                signerType: z.ZodOptional<z.ZodString>;
                signer: z.ZodOptional<z.ZodObject<{
                    publicKey: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    publicKey?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"dappInteraction">;
        dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            parameters?: unknown[] | undefined;
        }, {
            name: string;
            parameters?: unknown[] | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "dappInteraction";
        dappAddress: `0x${string}`;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }, {
        type: "dappInteraction";
        dappAddress: string;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"staking">;
        stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
    }, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"gift">;
        counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: `0x${string}` | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: string | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>]>, z.ZodObject<{
        type: z.ZodLiteral<"multicall">;
        calls: z.ZodArray<z.ZodObject<{
            details: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"deploy">;
                deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            }, {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"approval">;
                spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                approvalType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }, {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"payment">;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"trade">;
                srcAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                destAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"security">;
                action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
                context: z.ZodOptional<z.ZodObject<{
                    activeAt: z.ZodOptional<z.ZodString>;
                    newGuardian: z.ZodOptional<z.ZodString>;
                    newImplementation: z.ZodOptional<z.ZodString>;
                    newVersion: z.ZodOptional<z.ZodString>;
                    signerGuid: z.ZodOptional<z.ZodString>;
                    signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        guid: z.ZodOptional<z.ZodString>;
                        signerType: z.ZodOptional<z.ZodString>;
                        signer: z.ZodOptional<z.ZodObject<{
                            publicKey: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            publicKey?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"dappInteraction">;
                dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    name: z.ZodString;
                    parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }, {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"staking">;
                stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            }, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"gift">;
                counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }, {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }>]>;
    transferSummary: z.ZodOptional<z.ZodArray<z.ZodObject<{
        sent: z.ZodBoolean;
        asset: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            tokenId: z.ZodOptional<z.ZodNumber>;
            amount: z.ZodOptional<z.ZodString>;
            collectionName: z.ZodOptional<z.ZodString>;
            collectionPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }, {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: string;
            }, {
                currency: string;
                currencyAmount: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }, {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }>, "many">>;
    dapp: z.ZodOptional<z.ZodObject<{
        dappId: z.ZodString;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dappId: string;
        name?: string | null | undefined;
    }, {
        dappId: string;
        name?: string | null | undefined;
    }>>;
    actions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        properties: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">;
        defaultProperties: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }>, "many">>;
    title: z.ZodOptional<z.ZodString>;
    multisigDetails: z.ZodOptional<z.ZodObject<{
        signers: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        signers: `0x${string}`[];
    }, {
        signers: string[];
    }>>;
}, "status" | "fees" | "submitted" | "lastModified" | "transferSummary" | "actions" | "multisigDetails">, {
    status: z.ZodUnion<[z.ZodEnum<["pending", "success", "failure"]>, z.ZodEnum<["rejected", "cancelled", "queued"]>]>;
    type: z.ZodLiteral<"native">;
    transaction: z.ZodObject<Pick<{
        network: z.ZodString;
        hash: z.ZodString;
        status: z.ZodString;
        blockNumber: z.ZodOptional<z.ZodNumber>;
        transactionIndex: z.ZodNumber;
    }, "hash">, "strip", z.ZodTypeAny, {
        hash: string;
    }, {
        hash: string;
    }>;
    dapp: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        logoUrl: z.ZodString;
        iconUrl: z.ZodString;
        argentVerified: z.ZodBoolean;
        links: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            position: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            url: string;
            position: number;
        }, {
            name: string;
            url: string;
            position: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        logoUrl: string;
        argentVerified: boolean;
        links: {
            name: string;
            url: string;
            position: number;
        }[];
        iconUrl: string;
    }, {
        name: string;
        description: string;
        logoUrl: string;
        argentVerified: boolean;
        links: {
            name: string;
            url: string;
            position: number;
        }[];
        iconUrl: string;
    }>>;
    meta: z.ZodOptional<z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        shortTitle: z.ZodOptional<z.ZodString>;
        subtitle: z.ZodOptional<z.ZodString>;
        /** let's not import the keys from x-ui here */
        icon: z.ZodOptional<z.ZodString>;
        investment: z.ZodOptional<z.ZodObject<{
            useFullBalance: z.ZodOptional<z.ZodBoolean>;
            subsequentTransaction: z.ZodOptional<z.ZodBoolean>;
            investmentId: z.ZodOptional<z.ZodString>;
            stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            tokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            amount: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            tokenAddress: `0x${string}`;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        }, {
            amount: string;
            tokenAddress: string;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        }>>;
        isExecuteFromOutside: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        icon?: string | undefined;
        title?: string | undefined;
        shortTitle?: string | undefined;
        subtitle?: string | undefined;
        investment?: {
            amount: string;
            tokenAddress: `0x${string}`;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        } | undefined;
        isExecuteFromOutside?: boolean | undefined;
    }, {
        icon?: string | undefined;
        title?: string | undefined;
        shortTitle?: string | undefined;
        subtitle?: string | undefined;
        investment?: {
            amount: string;
            tokenAddress: string;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        } | undefined;
        isExecuteFromOutside?: boolean | undefined;
    }>>;
}>, "strip", z.ZodTypeAny, {
    status: "rejected" | "pending" | "success" | "failure" | "cancelled" | "queued";
    type: "native";
    submitted: number;
    lastModified: number;
    transaction: {
        hash: string;
    };
    fees?: {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        name: string;
        description: string;
        logoUrl: string;
        argentVerified: boolean;
        links: {
            name: string;
            url: string;
            position: number;
        }[];
        iconUrl: string;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    multisigDetails?: {
        signers: `0x${string}`[];
    } | undefined;
    meta?: {
        icon?: string | undefined;
        title?: string | undefined;
        shortTitle?: string | undefined;
        subtitle?: string | undefined;
        investment?: {
            amount: string;
            tokenAddress: `0x${string}`;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        } | undefined;
        isExecuteFromOutside?: boolean | undefined;
    } | undefined;
}, {
    status: "rejected" | "pending" | "success" | "failure" | "cancelled" | "queued";
    type: "native";
    submitted: number;
    lastModified: number;
    transaction: {
        hash: string;
    };
    fees?: {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        name: string;
        description: string;
        logoUrl: string;
        argentVerified: boolean;
        links: {
            name: string;
            url: string;
            position: number;
        }[];
        iconUrl: string;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    multisigDetails?: {
        signers: string[];
    } | undefined;
    meta?: {
        icon?: string | undefined;
        title?: string | undefined;
        shortTitle?: string | undefined;
        subtitle?: string | undefined;
        investment?: {
            amount: string;
            tokenAddress: string;
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            investmentId?: string | undefined;
            useFullBalance?: boolean | undefined;
            subsequentTransaction?: boolean | undefined;
        } | undefined;
        isExecuteFromOutside?: boolean | undefined;
    } | undefined;
}>;
export type NativeActivity = z.infer<typeof nativeActivitySchema>;
export type AnyActivity = Activity | NativeActivity;
export declare const activitiesSchema: z.ZodArray<z.ZodObject<{
    compositeId: z.ZodString;
    id: z.ZodString;
    status: z.ZodEnum<["pending", "success", "failure"]>;
    wallet: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    txSender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    source: z.ZodString;
    type: z.ZodEnum<["approval", "changePubKey", "dappInteraction", "deploy", "gift", "multicall", "payment", "security", "trade", "staking"]>; /** TODO: this schema could be further narrowed - this type will be equal to details.type */
    group: z.ZodEnum<["finance", "security"]>;
    submitted: z.ZodNumber;
    lastModified: z.ZodNumber;
    transaction: z.ZodObject<{
        network: z.ZodString;
        hash: z.ZodString;
        status: z.ZodString;
        blockNumber: z.ZodOptional<z.ZodNumber>;
        transactionIndex: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }, {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    }>;
    transfers: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["payment", "gasFee"]>;
        leg: z.ZodEnum<["credit", "debit"]>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterParty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        counterPartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: `0x${string}` | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: string | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, "many">;
    fees: z.ZodOptional<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        to: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        actualFee: z.ZodObject<{
            type: z.ZodString;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, "many">>;
    relatedAddresses: z.ZodNullable<z.ZodArray<z.ZodObject<{
        address: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        network: z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>;
        type: z.ZodEnum<["wallet", "token"]>;
    }, "strip", z.ZodTypeAny, {
        address: `0x${string}`;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }, {
        address: string;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }>, "many">>;
    network: z.ZodString;
    networkDetails: z.ZodOptional<z.ZodObject<{
        chainId: z.ZodEnum<["TESTNET", "MAINNET", "SEPOLIA"]>;
        ethereumNetwork: z.ZodEnum<["mainnet", "sepolia"]>;
    }, "strip", z.ZodTypeAny, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }, {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    }>>;
    details: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"deploy">;
        deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        type: "deploy";
        contractAddress: `0x${string}`;
        deployer: `0x${string}`;
    }, {
        type: "deploy";
        contractAddress: string;
        deployer: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"approval">;
        spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        approvalType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "approval";
        spender: `0x${string}`;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }, {
        type: "approval";
        spender: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"payment">;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"trade">;
        srcAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        destAsset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }, {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"security">;
        action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
        context: z.ZodOptional<z.ZodObject<{
            activeAt: z.ZodOptional<z.ZodString>;
            newGuardian: z.ZodOptional<z.ZodString>;
            newImplementation: z.ZodOptional<z.ZodString>;
            newVersion: z.ZodOptional<z.ZodString>;
            signerGuid: z.ZodOptional<z.ZodString>;
            signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                guid: z.ZodOptional<z.ZodString>;
                signerType: z.ZodOptional<z.ZodString>;
                signer: z.ZodOptional<z.ZodObject<{
                    publicKey: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    publicKey?: string | undefined;
                }, {
                    publicKey?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }, {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }, {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }, {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"dappInteraction">;
        dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            parameters?: unknown[] | undefined;
        }, {
            name: string;
            parameters?: unknown[] | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        type: "dappInteraction";
        dappAddress: `0x${string}`;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }, {
        type: "dappInteraction";
        dappAddress: string;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"staking">;
        stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
        counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
    }, {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"gift">;
        counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
        leg: z.ZodString;
        asset: z.ZodObject<{
            type: z.ZodEnum<["token", "nft"]>;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: number;
            }, {
                currency: string;
                currencyAmount: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }, {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        }>;
        counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: `0x${string}` | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }, {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: string | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }>]>, z.ZodObject<{
        type: z.ZodLiteral<"multicall">;
        calls: z.ZodArray<z.ZodObject<{
            details: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"deploy">;
                deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            }, {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"approval">;
                spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                approvalType: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }, {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"payment">;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"trade">;
                srcAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                destAsset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }, {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"security">;
                action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
                context: z.ZodOptional<z.ZodObject<{
                    activeAt: z.ZodOptional<z.ZodString>;
                    newGuardian: z.ZodOptional<z.ZodString>;
                    newImplementation: z.ZodOptional<z.ZodString>;
                    newVersion: z.ZodOptional<z.ZodString>;
                    signerGuid: z.ZodOptional<z.ZodString>;
                    signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        guid: z.ZodOptional<z.ZodString>;
                        signerType: z.ZodOptional<z.ZodString>;
                        signer: z.ZodOptional<z.ZodObject<{
                            publicKey: z.ZodOptional<z.ZodString>;
                        }, "strip", z.ZodTypeAny, {
                            publicKey?: string | undefined;
                        }, {
                            publicKey?: string | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }, {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }, {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }, {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"dappInteraction">;
                dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    name: z.ZodString;
                    parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }, {
                    name: string;
                    parameters?: unknown[] | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }, {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"staking">;
                stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
                counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            }, {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"gift">;
                counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
                leg: z.ZodString;
                asset: z.ZodObject<{
                    type: z.ZodEnum<["token", "nft"]>;
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    amount: z.ZodOptional<z.ZodString>;
                    fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        currency: z.ZodString;
                        currencyAmount: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        currency: string;
                        currencyAmount: number;
                    }, {
                        currency: string;
                        currencyAmount: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }, {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                }>;
                counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
            }, "strip", z.ZodTypeAny, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }, {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }, {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }, {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    }>]>;
    transferSummary: z.ZodOptional<z.ZodArray<z.ZodObject<{
        sent: z.ZodBoolean;
        asset: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            tokenId: z.ZodOptional<z.ZodNumber>;
            amount: z.ZodOptional<z.ZodString>;
            collectionName: z.ZodOptional<z.ZodString>;
            collectionPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            nftPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }, {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token">;
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            amount: z.ZodOptional<z.ZodString>;
            fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                currency: z.ZodString;
                currencyAmount: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                currency: string;
                currencyAmount: string;
            }, {
                currency: string;
                currencyAmount: string;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }, {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }, {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }>, "many">>;
    dapp: z.ZodOptional<z.ZodObject<{
        dappId: z.ZodString;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        dappId: string;
        name?: string | null | undefined;
    }, {
        dappId: string;
        name?: string | null | undefined;
    }>>;
    actions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        properties: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">;
        defaultProperties: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"amount">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
            amount: z.ZodString;
            usd: z.ZodString;
            editable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }, {
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"address">;
            label: z.ZodString;
            address: z.ZodString;
            addressName: z.ZodOptional<z.ZodString>;
            verified: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }, {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"timestamp">;
            label: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            type: "timestamp";
            label: string;
        }, {
            value: string;
            type: "timestamp";
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"token_address">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"calldata">;
            label: z.ZodString;
            entrypoint: z.ZodString;
            calldata: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }, {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
            label: z.ZodString;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            label: string;
            text: string;
        }, {
            type: "text";
            label: string;
            text: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nft">;
            label: z.ZodString;
            token: z.ZodObject<{
                address: z.ZodString;
                name: z.ZodString;
                symbol: z.ZodOptional<z.ZodString>;
                decimals: z.ZodOptional<z.ZodNumber>;
                unknown: z.ZodBoolean;
                iconUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }, {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }, {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }, {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }>, "many">>;
    title: z.ZodOptional<z.ZodString>;
    multisigDetails: z.ZodOptional<z.ZodObject<{
        signers: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        signers: `0x${string}`[];
    }, {
        signers: string[];
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "success" | "failure";
    type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
    network: string;
    wallet: `0x${string}`;
    id: string;
    group: "security" | "finance";
    details: {
        type: "deploy";
        contractAddress: `0x${string}`;
        deployer: `0x${string}`;
    } | {
        type: "approval";
        spender: `0x${string}`;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    } | {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    } | {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } | {
        type: "dappInteraction";
        dappAddress: `0x${string}`;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    } | {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: `0x${string}`;
    } | {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: `0x${string}` | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: `0x${string}`;
                deployer: `0x${string}`;
            } | {
                type: "approval";
                spender: `0x${string}`;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: `0x${string}`;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: `0x${string}`;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: `0x${string}`;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: `0x${string}` | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    };
    transfers: {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: `0x${string}` | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }[];
    compositeId: string;
    txSender: `0x${string}`;
    source: string;
    submitted: number;
    lastModified: number;
    transaction: {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    };
    relatedAddresses: {
        address: `0x${string}`;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }[] | null;
    fees?: {
        type: string;
        to: `0x${string}`;
        actualFee: {
            type: string;
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    networkDetails?: {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    } | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: `0x${string}`;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        dappId: string;
        name?: string | null | undefined;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    title?: string | undefined;
    multisigDetails?: {
        signers: `0x${string}`[];
    } | undefined;
}, {
    status: "pending" | "success" | "failure";
    type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
    network: string;
    wallet: string;
    id: string;
    group: "security" | "finance";
    details: {
        type: "deploy";
        contractAddress: string;
        deployer: string;
    } | {
        type: "approval";
        spender: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        approvalType: string;
    } | {
        type: "payment";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "trade";
        srcAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        destAsset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    } | {
        type: "security";
        action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
        context?: {
            activeAt?: string | undefined;
            newGuardian?: string | undefined;
            newImplementation?: string | undefined;
            newVersion?: string | undefined;
            signerGuid?: string | undefined;
            signers?: {
                guid?: string | undefined;
                signerType?: string | undefined;
                signer?: {
                    publicKey?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } | {
        type: "dappInteraction";
        dappAddress: string;
        function?: {
            name: string;
            parameters?: unknown[] | undefined;
        } | null | undefined;
    } | {
        type: "staking";
        stakerInfo: {
            name?: string | undefined;
            address?: string | undefined;
            iconUrl?: string | undefined;
        };
        stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty: string;
    } | {
        type: "gift";
        leg: string;
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterparty?: string | undefined;
        counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    } | {
        type: "multicall";
        calls: {
            details: {
                type: "deploy";
                contractAddress: string;
                deployer: string;
            } | {
                type: "approval";
                spender: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                approvalType: string;
            } | {
                type: "payment";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            } | {
                type: "trade";
                srcAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                destAsset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
            } | {
                type: "security";
                action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                context?: {
                    activeAt?: string | undefined;
                    newGuardian?: string | undefined;
                    newImplementation?: string | undefined;
                    newVersion?: string | undefined;
                    signerGuid?: string | undefined;
                    signers?: {
                        guid?: string | undefined;
                        signerType?: string | undefined;
                        signer?: {
                            publicKey?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
            } | {
                type: "dappInteraction";
                dappAddress: string;
                function?: {
                    name: string;
                    parameters?: unknown[] | undefined;
                } | null | undefined;
            } | {
                type: "staking";
                stakerInfo: {
                    name?: string | undefined;
                    address?: string | undefined;
                    iconUrl?: string | undefined;
                };
                stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty: string;
            } | {
                type: "gift";
                leg: string;
                asset: {
                    type: "nft" | "token";
                    tokenAddress: string;
                    amount?: string | undefined;
                    fiatAmount?: {
                        currency: string;
                        currencyAmount: number;
                    } | null | undefined;
                };
                counterparty?: string | undefined;
                counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
            };
        }[];
    };
    transfers: {
        type: "payment" | "gasFee";
        leg: "credit" | "debit";
        asset: {
            type: "nft" | "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
        counterParty?: string | undefined;
        counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
    }[];
    compositeId: string;
    txSender: string;
    source: string;
    submitted: number;
    lastModified: number;
    transaction: {
        status: string;
        network: string;
        hash: string;
        transactionIndex: number;
        blockNumber?: number | undefined;
    };
    relatedAddresses: {
        address: string;
        type: "wallet" | "token";
        network: "ethereum" | "zksync" | "zksync2" | "starknet";
    }[] | null;
    fees?: {
        type: string;
        to: string;
        actualFee: {
            type: string;
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: number;
            } | null | undefined;
        };
    }[] | undefined;
    networkDetails?: {
        chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
        ethereumNetwork: "mainnet" | "sepolia";
    } | undefined;
    transferSummary?: {
        sent: boolean;
        asset: {
            type: "nft";
            tokenAddress: string;
            amount?: string | undefined;
            tokenId?: number | undefined;
            collectionName?: string | undefined;
            collectionPreviewImage?: string | null | undefined;
            nftName?: string | null | undefined;
            nftPreviewImage?: string | null | undefined;
        } | {
            type: "token";
            tokenAddress: string;
            amount?: string | undefined;
            fiatAmount?: {
                currency: string;
                currencyAmount: string;
            } | null | undefined;
        };
    }[] | undefined;
    dapp?: {
        dappId: string;
        name?: string | null | undefined;
    } | undefined;
    actions?: {
        name: string;
        properties: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[];
        defaultProperties?: ({
            type: "amount";
            amount: string;
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
            usd: string;
            editable: boolean;
        } | {
            address: string;
            type: "address";
            label: string;
            verified?: boolean | undefined;
            addressName?: string | undefined;
        } | {
            value: string;
            type: "timestamp";
            label: string;
        } | {
            type: "token_address";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        } | {
            type: "calldata";
            calldata: string[];
            entrypoint: string;
            label: string;
        } | {
            type: "text";
            label: string;
            text: string;
        } | {
            type: "nft";
            token: {
                name: string;
                address: string;
                type: string;
                unknown: boolean;
                symbol?: string | undefined;
                decimals?: number | undefined;
                iconUrl?: string | undefined;
            };
            label: string;
        })[] | undefined;
    }[] | undefined;
    title?: string | undefined;
    multisigDetails?: {
        signers: string[];
    } | undefined;
}>, "many">;
export declare const activityResponseSchema: z.ZodObject<{
    activities: z.ZodArray<z.ZodObject<{
        compositeId: z.ZodString;
        id: z.ZodString;
        status: z.ZodEnum<["pending", "success", "failure"]>;
        wallet: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        txSender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        source: z.ZodString;
        type: z.ZodEnum<["approval", "changePubKey", "dappInteraction", "deploy", "gift", "multicall", "payment", "security", "trade", "staking"]>; /** TODO: this schema could be further narrowed - this type will be equal to details.type */
        group: z.ZodEnum<["finance", "security"]>;
        submitted: z.ZodNumber;
        lastModified: z.ZodNumber;
        transaction: z.ZodObject<{
            network: z.ZodString;
            hash: z.ZodString;
            status: z.ZodString;
            blockNumber: z.ZodOptional<z.ZodNumber>;
            transactionIndex: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        }, {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        }>;
        transfers: z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["payment", "gasFee"]>;
            leg: z.ZodEnum<["credit", "debit"]>;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            counterParty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
            counterPartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: `0x${string}` | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }, {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: string | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }>, "many">;
        fees: z.ZodOptional<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            to: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            actualFee: z.ZodObject<{
                type: z.ZodString;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: string;
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: string;
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            to: `0x${string}`;
            actualFee: {
                type: string;
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }, {
            type: string;
            to: string;
            actualFee: {
                type: string;
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }>, "many">>;
        relatedAddresses: z.ZodNullable<z.ZodArray<z.ZodObject<{
            address: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            network: z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>;
            type: z.ZodEnum<["wallet", "token"]>;
        }, "strip", z.ZodTypeAny, {
            address: `0x${string}`;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }, {
            address: string;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }>, "many">>;
        network: z.ZodString;
        networkDetails: z.ZodOptional<z.ZodObject<{
            chainId: z.ZodEnum<["TESTNET", "MAINNET", "SEPOLIA"]>;
            ethereumNetwork: z.ZodEnum<["mainnet", "sepolia"]>;
        }, "strip", z.ZodTypeAny, {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        }, {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        }>>;
        details: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"deploy">;
            deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        }, {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"approval">;
            spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            approvalType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        }, {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"payment">;
            counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            leg: z.ZodString;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }, {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"trade">;
            srcAsset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            destAsset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }, {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"security">;
            action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
            context: z.ZodOptional<z.ZodObject<{
                activeAt: z.ZodOptional<z.ZodString>;
                newGuardian: z.ZodOptional<z.ZodString>;
                newImplementation: z.ZodOptional<z.ZodString>;
                newVersion: z.ZodOptional<z.ZodString>;
                signerGuid: z.ZodOptional<z.ZodString>;
                signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    guid: z.ZodOptional<z.ZodString>;
                    signerType: z.ZodOptional<z.ZodString>;
                    signer: z.ZodOptional<z.ZodObject<{
                        publicKey: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        publicKey?: string | undefined;
                    }, {
                        publicKey?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }, {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            }, {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        }, {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"dappInteraction">;
            dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                parameters?: unknown[] | undefined;
            }, {
                name: string;
                parameters?: unknown[] | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        }, {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"staking">;
            stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
            counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        }, {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"gift">;
            counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
            leg: z.ZodString;
            asset: z.ZodObject<{
                type: z.ZodEnum<["token", "nft"]>;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: number;
                }, {
                    currency: string;
                    currencyAmount: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }, {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            }>;
            counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
        }, "strip", z.ZodTypeAny, {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }, {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }>]>, z.ZodObject<{
            type: z.ZodLiteral<"multicall">;
            calls: z.ZodArray<z.ZodObject<{
                details: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"deploy">;
                    deployer: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    contractAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    type: "deploy";
                    contractAddress: `0x${string}`;
                    deployer: `0x${string}`;
                }, {
                    type: "deploy";
                    contractAddress: string;
                    deployer: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"approval">;
                    spender: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    asset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                    approvalType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "approval";
                    spender: `0x${string}`;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                }, {
                    type: "approval";
                    spender: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"payment">;
                    counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    leg: z.ZodString;
                    asset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                    counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
                }, "strip", z.ZodTypeAny, {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                }, {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"trade">;
                    srcAsset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                    destAsset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                }, {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"security">;
                    action: z.ZodEnum<["triggerEscapeGuardian", "triggerEscapeSigner", "escapeGuardian", "escapeSigner", "guardianChanged", "guardianBackupChanged", "signerChanged", "cancelEscape", "accountUpgraded", "multisigConfigurationUpdated"]>;
                    context: z.ZodOptional<z.ZodObject<{
                        activeAt: z.ZodOptional<z.ZodString>;
                        newGuardian: z.ZodOptional<z.ZodString>;
                        newImplementation: z.ZodOptional<z.ZodString>;
                        newVersion: z.ZodOptional<z.ZodString>;
                        signerGuid: z.ZodOptional<z.ZodString>;
                        signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            guid: z.ZodOptional<z.ZodString>;
                            signerType: z.ZodOptional<z.ZodString>;
                            signer: z.ZodOptional<z.ZodObject<{
                                publicKey: z.ZodOptional<z.ZodString>;
                            }, "strip", z.ZodTypeAny, {
                                publicKey?: string | undefined;
                            }, {
                                publicKey?: string | undefined;
                            }>>;
                        }, "strip", z.ZodTypeAny, {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }, {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    }, {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                }, {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"dappInteraction">;
                    dappAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    function: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                        name: z.ZodString;
                        parameters: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        parameters?: unknown[] | undefined;
                    }, {
                        name: string;
                        parameters?: unknown[] | undefined;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    type: "dappInteraction";
                    dappAddress: `0x${string}`;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                }, {
                    type: "dappInteraction";
                    dappAddress: string;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"staking">;
                    stakingAction: z.ZodEnum<["deposit", "stake", "initiateWithdraw", "withdraw", "claim"]>;
                    counterparty: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    asset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                }, {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"gift">;
                    counterparty: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
                    leg: z.ZodString;
                    asset: z.ZodObject<{
                        type: z.ZodEnum<["token", "nft"]>;
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        amount: z.ZodOptional<z.ZodString>;
                        fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                            currency: z.ZodString;
                            currencyAmount: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            currency: string;
                            currencyAmount: number;
                        }, {
                            currency: string;
                            currencyAmount: number;
                        }>>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }, {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    }>;
                    counterpartyNetwork: z.ZodOptional<z.ZodEnum<["ethereum", "starknet", "zksync", "zksync2"]>>;
                }, "strip", z.ZodTypeAny, {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: `0x${string}` | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                }, {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: string | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                details: {
                    type: "deploy";
                    contractAddress: `0x${string}`;
                    deployer: `0x${string}`;
                } | {
                    type: "approval";
                    spender: `0x${string}`;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: `0x${string}`;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: `0x${string}` | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }, {
                details: {
                    type: "deploy";
                    contractAddress: string;
                    deployer: string;
                } | {
                    type: "approval";
                    spender: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: string;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: string | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: `0x${string}`;
                    deployer: `0x${string}`;
                } | {
                    type: "approval";
                    spender: `0x${string}`;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: `0x${string}`;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: `0x${string}` | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        }, {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: string;
                    deployer: string;
                } | {
                    type: "approval";
                    spender: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: string;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: string | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        }>]>;
        transferSummary: z.ZodOptional<z.ZodArray<z.ZodObject<{
            sent: z.ZodBoolean;
            asset: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"nft">;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                tokenId: z.ZodOptional<z.ZodNumber>;
                amount: z.ZodOptional<z.ZodString>;
                collectionName: z.ZodOptional<z.ZodString>;
                collectionPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                nftName: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                nftPreviewImage: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                type: "nft";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            }, {
                type: "nft";
                tokenAddress: string;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"token">;
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                amount: z.ZodOptional<z.ZodString>;
                fiatAmount: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    currency: z.ZodString;
                    currencyAmount: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    currency: string;
                    currencyAmount: string;
                }, {
                    currency: string;
                    currencyAmount: string;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                type: "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            }, {
                type: "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }, {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: string;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }>, "many">>;
        dapp: z.ZodOptional<z.ZodObject<{
            dappId: z.ZodString;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            dappId: string;
            name?: string | null | undefined;
        }, {
            dappId: string;
            name?: string | null | undefined;
        }>>;
        actions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            properties: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"amount">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
                amount: z.ZodString;
                usd: z.ZodString;
                editable: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            }, {
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"address">;
                label: z.ZodString;
                address: z.ZodString;
                addressName: z.ZodOptional<z.ZodString>;
                verified: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            }, {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"timestamp">;
                label: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                type: "timestamp";
                label: string;
            }, {
                value: string;
                type: "timestamp";
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"token_address">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }, {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"calldata">;
                label: z.ZodString;
                entrypoint: z.ZodString;
                calldata: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            }, {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
                label: z.ZodString;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                label: string;
                text: string;
            }, {
                type: "text";
                label: string;
                text: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"nft">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }, {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }>]>, "many">;
            defaultProperties: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"amount">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
                amount: z.ZodString;
                usd: z.ZodString;
                editable: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            }, {
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"address">;
                label: z.ZodString;
                address: z.ZodString;
                addressName: z.ZodOptional<z.ZodString>;
                verified: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            }, {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"timestamp">;
                label: z.ZodString;
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
                type: "timestamp";
                label: string;
            }, {
                value: string;
                type: "timestamp";
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"token_address">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }, {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"calldata">;
                label: z.ZodString;
                entrypoint: z.ZodString;
                calldata: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            }, {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
                label: z.ZodString;
                text: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                label: string;
                text: string;
            }, {
                type: "text";
                label: string;
                text: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"nft">;
                label: z.ZodString;
                token: z.ZodObject<{
                    address: z.ZodString;
                    name: z.ZodString;
                    symbol: z.ZodOptional<z.ZodString>;
                    decimals: z.ZodOptional<z.ZodNumber>;
                    unknown: z.ZodBoolean;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }, {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }, {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }, {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }>, "many">>;
        title: z.ZodOptional<z.ZodString>;
        multisigDetails: z.ZodOptional<z.ZodObject<{
            signers: z.ZodArray<z.ZodEffects<z.ZodString, `0x${string}`, string>, "many">;
        }, "strip", z.ZodTypeAny, {
            signers: `0x${string}`[];
        }, {
            signers: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        status: "pending" | "success" | "failure";
        type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
        network: string;
        wallet: `0x${string}`;
        id: string;
        group: "security" | "finance";
        details: {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        } | {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: `0x${string}`;
                    deployer: `0x${string}`;
                } | {
                    type: "approval";
                    spender: `0x${string}`;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: `0x${string}`;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: `0x${string}` | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        };
        transfers: {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: `0x${string}` | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }[];
        compositeId: string;
        txSender: `0x${string}`;
        source: string;
        submitted: number;
        lastModified: number;
        transaction: {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        };
        relatedAddresses: {
            address: `0x${string}`;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }[] | null;
        fees?: {
            type: string;
            to: `0x${string}`;
            actualFee: {
                type: string;
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }[] | undefined;
        networkDetails?: {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        } | undefined;
        transferSummary?: {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }[] | undefined;
        dapp?: {
            dappId: string;
            name?: string | null | undefined;
        } | undefined;
        actions?: {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }[] | undefined;
        title?: string | undefined;
        multisigDetails?: {
            signers: `0x${string}`[];
        } | undefined;
    }, {
        status: "pending" | "success" | "failure";
        type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
        network: string;
        wallet: string;
        id: string;
        group: "security" | "finance";
        details: {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        } | {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: string;
                    deployer: string;
                } | {
                    type: "approval";
                    spender: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: string;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: string | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        };
        transfers: {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: string | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }[];
        compositeId: string;
        txSender: string;
        source: string;
        submitted: number;
        lastModified: number;
        transaction: {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        };
        relatedAddresses: {
            address: string;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }[] | null;
        fees?: {
            type: string;
            to: string;
            actualFee: {
                type: string;
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }[] | undefined;
        networkDetails?: {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        } | undefined;
        transferSummary?: {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: string;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }[] | undefined;
        dapp?: {
            dappId: string;
            name?: string | null | undefined;
        } | undefined;
        actions?: {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }[] | undefined;
        title?: string | undefined;
        multisigDetails?: {
            signers: string[];
        } | undefined;
    }>, "many">;
    page: z.ZodNumber;
    pageSize: z.ZodNumber;
    totalElements: z.ZodNumber;
    totalPages: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    totalPages: number;
    page: number;
    activities: {
        status: "pending" | "success" | "failure";
        type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
        network: string;
        wallet: `0x${string}`;
        id: string;
        group: "security" | "finance";
        details: {
            type: "deploy";
            contractAddress: `0x${string}`;
            deployer: `0x${string}`;
        } | {
            type: "approval";
            spender: `0x${string}`;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: `0x${string}`;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: `0x${string}`;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: `0x${string}` | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: `0x${string}`;
                    deployer: `0x${string}`;
                } | {
                    type: "approval";
                    spender: `0x${string}`;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: `0x${string}`;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: `0x${string}`;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: `0x${string}`;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: `0x${string}` | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        };
        transfers: {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: `0x${string}` | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }[];
        compositeId: string;
        txSender: `0x${string}`;
        source: string;
        submitted: number;
        lastModified: number;
        transaction: {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        };
        relatedAddresses: {
            address: `0x${string}`;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }[] | null;
        fees?: {
            type: string;
            to: `0x${string}`;
            actualFee: {
                type: string;
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }[] | undefined;
        networkDetails?: {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        } | undefined;
        transferSummary?: {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: `0x${string}`;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }[] | undefined;
        dapp?: {
            dappId: string;
            name?: string | null | undefined;
        } | undefined;
        actions?: {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }[] | undefined;
        title?: string | undefined;
        multisigDetails?: {
            signers: `0x${string}`[];
        } | undefined;
    }[];
    pageSize: number;
    totalElements: number;
}, {
    totalPages: number;
    page: number;
    activities: {
        status: "pending" | "success" | "failure";
        type: "staking" | "payment" | "approval" | "changePubKey" | "dappInteraction" | "deploy" | "gift" | "multicall" | "security" | "trade";
        network: string;
        wallet: string;
        id: string;
        group: "security" | "finance";
        details: {
            type: "deploy";
            contractAddress: string;
            deployer: string;
        } | {
            type: "approval";
            spender: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            approvalType: string;
        } | {
            type: "payment";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "trade";
            srcAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            destAsset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        } | {
            type: "security";
            action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
            context?: {
                activeAt?: string | undefined;
                newGuardian?: string | undefined;
                newImplementation?: string | undefined;
                newVersion?: string | undefined;
                signerGuid?: string | undefined;
                signers?: {
                    guid?: string | undefined;
                    signerType?: string | undefined;
                    signer?: {
                        publicKey?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | {
            type: "dappInteraction";
            dappAddress: string;
            function?: {
                name: string;
                parameters?: unknown[] | undefined;
            } | null | undefined;
        } | {
            type: "staking";
            stakerInfo: {
                name?: string | undefined;
                address?: string | undefined;
                iconUrl?: string | undefined;
            };
            stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty: string;
        } | {
            type: "gift";
            leg: string;
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterparty?: string | undefined;
            counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        } | {
            type: "multicall";
            calls: {
                details: {
                    type: "deploy";
                    contractAddress: string;
                    deployer: string;
                } | {
                    type: "approval";
                    spender: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    approvalType: string;
                } | {
                    type: "payment";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                } | {
                    type: "trade";
                    srcAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    destAsset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                } | {
                    type: "security";
                    action: "triggerEscapeGuardian" | "triggerEscapeSigner" | "escapeGuardian" | "escapeSigner" | "guardianChanged" | "guardianBackupChanged" | "signerChanged" | "cancelEscape" | "accountUpgraded" | "multisigConfigurationUpdated";
                    context?: {
                        activeAt?: string | undefined;
                        newGuardian?: string | undefined;
                        newImplementation?: string | undefined;
                        newVersion?: string | undefined;
                        signerGuid?: string | undefined;
                        signers?: {
                            guid?: string | undefined;
                            signerType?: string | undefined;
                            signer?: {
                                publicKey?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                } | {
                    type: "dappInteraction";
                    dappAddress: string;
                    function?: {
                        name: string;
                        parameters?: unknown[] | undefined;
                    } | null | undefined;
                } | {
                    type: "staking";
                    stakerInfo: {
                        name?: string | undefined;
                        address?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    stakingAction: "deposit" | "stake" | "initiateWithdraw" | "withdraw" | "claim";
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty: string;
                } | {
                    type: "gift";
                    leg: string;
                    asset: {
                        type: "nft" | "token";
                        tokenAddress: string;
                        amount?: string | undefined;
                        fiatAmount?: {
                            currency: string;
                            currencyAmount: number;
                        } | null | undefined;
                    };
                    counterparty?: string | undefined;
                    counterpartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
                };
            }[];
        };
        transfers: {
            type: "payment" | "gasFee";
            leg: "credit" | "debit";
            asset: {
                type: "nft" | "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
            counterParty?: string | undefined;
            counterPartyNetwork?: "ethereum" | "zksync" | "zksync2" | "starknet" | undefined;
        }[];
        compositeId: string;
        txSender: string;
        source: string;
        submitted: number;
        lastModified: number;
        transaction: {
            status: string;
            network: string;
            hash: string;
            transactionIndex: number;
            blockNumber?: number | undefined;
        };
        relatedAddresses: {
            address: string;
            type: "wallet" | "token";
            network: "ethereum" | "zksync" | "zksync2" | "starknet";
        }[] | null;
        fees?: {
            type: string;
            to: string;
            actualFee: {
                type: string;
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: number;
                } | null | undefined;
            };
        }[] | undefined;
        networkDetails?: {
            chainId: "TESTNET" | "MAINNET" | "SEPOLIA";
            ethereumNetwork: "mainnet" | "sepolia";
        } | undefined;
        transferSummary?: {
            sent: boolean;
            asset: {
                type: "nft";
                tokenAddress: string;
                amount?: string | undefined;
                tokenId?: number | undefined;
                collectionName?: string | undefined;
                collectionPreviewImage?: string | null | undefined;
                nftName?: string | null | undefined;
                nftPreviewImage?: string | null | undefined;
            } | {
                type: "token";
                tokenAddress: string;
                amount?: string | undefined;
                fiatAmount?: {
                    currency: string;
                    currencyAmount: string;
                } | null | undefined;
            };
        }[] | undefined;
        dapp?: {
            dappId: string;
            name?: string | null | undefined;
        } | undefined;
        actions?: {
            name: string;
            properties: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[];
            defaultProperties?: ({
                type: "amount";
                amount: string;
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
                usd: string;
                editable: boolean;
            } | {
                address: string;
                type: "address";
                label: string;
                verified?: boolean | undefined;
                addressName?: string | undefined;
            } | {
                value: string;
                type: "timestamp";
                label: string;
            } | {
                type: "token_address";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            } | {
                type: "calldata";
                calldata: string[];
                entrypoint: string;
                label: string;
            } | {
                type: "text";
                label: string;
                text: string;
            } | {
                type: "nft";
                token: {
                    name: string;
                    address: string;
                    type: string;
                    unknown: boolean;
                    symbol?: string | undefined;
                    decimals?: number | undefined;
                    iconUrl?: string | undefined;
                };
                label: string;
            })[] | undefined;
        }[] | undefined;
        title?: string | undefined;
        multisigDetails?: {
            signers: string[];
        } | undefined;
    }[];
    pageSize: number;
    totalElements: number;
}>;
export type ActivityResponse = z.infer<typeof activityResponseSchema>;
export type ActivityDetailsAction = z.infer<typeof detailsActionSchema>;
export declare function isActivityDetailsAction(value: unknown): value is ActivityDetailsAction;
export type ActivitySummary = z.infer<typeof activitySummarySchema>;
export declare const isActivitySummary: (summary: unknown) => summary is ActivitySummary;
export type TokenActivitySummary = ActivitySummary & {
    asset: Extract<ActivitySummary["asset"], {
        type: "token";
    }>;
};
export type NftActivitySummary = ActivitySummary & {
    asset: Extract<ActivitySummary["asset"], {
        type: "nft";
    }>;
};
export declare const isTokenActivitySummary: (summary: unknown) => summary is TokenActivitySummary;
export declare const isNftActivitySummary: (summary: unknown) => summary is NftActivitySummary;
export {};
