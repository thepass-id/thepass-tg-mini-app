import { isUndefined as p } from "lodash-es";
import { num as c, uint256 as l } from "starknet";
import r from "../assets/tokens.json.js";
const g = async (a, s, o) => {
  const e = await o.callContract({
    contractAddress: a,
    entrypoint: "balanceOf",
    calldata: [s]
  });
  return BigInt(c.toHex(l.uint256ToBN({
    low: e[0],
    high: e[1]
  })));
}, w = async (a, s, o) => {
  const e = r.filter((t) => t.networkId === a);
  return (await Promise.allSettled(e.map((t) => s.callContract({
    contractAddress: t.address,
    entrypoint: "balanceOf",
    calldata: [o]
  })))).reduce((t, n, i) => {
    if (n.status === "fulfilled" && p(n.value) || n.status === "rejected" || n.value[0] === "0x0" && n.value[1] === "0x0")
      return t;
    const u = BigInt(c.toHex(l.uint256ToBN({
      low: n.value[0],
      high: n.value[1]
    }))), f = {
      ...e[i],
      balance: u
    };
    return t.push(f), t;
  }, []);
}, B = async () => r, b = ({ address: a, networkId: s }) => r.find((e) => e.address === a && e.networkId === s);
export {
  g as getTokenBalance,
  B as getTokens,
  w as getTokensBalances,
  b as useToken
};
