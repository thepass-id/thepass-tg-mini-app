import { default as retry } from 'async-retry';
import { ArgentBackendNetworkId } from '../../backend';
import { Address } from '../../chains/starknet/address';
import { IHttpService } from '../../http';
import { ITokenServiceWeb } from './interface';
import { ApiTokenInfo } from './types/backend.model';
import { WebBaseTokenWithBalance } from './types/webToken.model';
/**
 * TokenService class implements ITokenService interface.
 */
export declare class TokenServiceWeb implements ITokenServiceWeb {
    protected readonly apiBase: string;
    protected readonly httpService: IHttpService;
    private readonly TOKENS_INFO_URL;
    constructor(apiBase: string, httpService: IHttpService);
    /**
     * Fetch tokens info from backend
     * @param {Address} tokenAddress - The token address.
     * @returns {Promise<ApiTokenInfo[]>} - The fetched tokens or undefined if there was an error or not default network
     */
    fetchTokensInfoFromBackend(tokenAddress?: Address): Promise<ApiTokenInfo[] | undefined>;
    /**
     * Fetch list of tokens and balances for given account from backend
     * @param {Address} address - The account address.
     * @returns {Promise<WebBaseTokenWithBalance[]>} - The fetched balances for the account address.
     */
    fetchAddressTokenBalancesFromBackend(address: string, network: ArgentBackendNetworkId, opts?: retry.Options): Promise<WebBaseTokenWithBalance[]>;
    fetchDefiDecomposition(address: Address, application: "mobile" | "webwallet" | "argentx"): Promise<{
        dappId: string;
        products: import('zod').objectOutputType<{
            productId: import('zod').ZodOptional<import('zod').ZodString>;
            name: import('zod').ZodString;
            manageUrl: import('zod').ZodOptional<import('zod').ZodString>;
            type: import('zod').ZodUnion<[import('zod').ZodLiteral<"concentratedLiquidityPosition">, import('zod').ZodLiteral<"collateralizedDebtPosition">, import('zod').ZodLiteral<"delegatedTokens">, import('zod').ZodLiteral<"strkDelegatedStaking">, import('zod').ZodLiteral<"staking">]>;
            groups: import('zod').ZodOptional<import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodObject<{
                name: import('zod').ZodOptional<import('zod').ZodString>;
                healthRatio: import('zod').ZodOptional<import('zod').ZodString>;
            }, "strip", import('zod').ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: import('zod').ZodArray<import('zod').ZodUnion<[import('zod').ZodUnion<[import('zod').ZodUnion<[import('zod').ZodUnion<[import('zod').ZodObject<import("zod").objectUtil.extendShape<{
                id: import('zod').ZodString;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                tokenAddress: import('zod').ZodOptional<import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }, {
                tokenId: import('zod').ZodString;
                data: import('zod').ZodObject<{
                    poolFeePercentage: import('zod').ZodString;
                    tickSpacingPercentage: import('zod').ZodOptional<import('zod').ZodString>;
                    token0: import('zod').ZodObject<{
                        tokenAddress: import('zod').ZodEffects<import('zod').ZodString, `0x${string}`, string>;
                        principal: import('zod').ZodString;
                        accruedFees: import('zod').ZodString;
                        minPrice: import('zod').ZodString;
                        maxPrice: import('zod').ZodString;
                        currentPrice: import('zod').ZodString;
                    }, "strip", import('zod').ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: import('zod').ZodObject<{
                        tokenAddress: import('zod').ZodEffects<import('zod').ZodString, `0x${string}`, string>;
                        principal: import('zod').ZodString;
                        accruedFees: import('zod').ZodString;
                        minPrice: import('zod').ZodString;
                        maxPrice: import('zod').ZodString;
                        currentPrice: import('zod').ZodString;
                    }, "strip", import('zod').ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", import('zod').ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", import('zod').ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, import('zod').ZodObject<import("zod").objectUtil.extendShape<{
                id: import('zod').ZodString;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                tokenAddress: import('zod').ZodOptional<import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }, {
                data: import('zod').ZodObject<{
                    apy: import('zod').ZodOptional<import('zod').ZodString>;
                    totalApy: import('zod').ZodOptional<import('zod').ZodString>;
                    group: import('zod').ZodOptional<import('zod').ZodNumber>;
                    collateral: import('zod').ZodBoolean;
                    debt: import('zod').ZodBoolean;
                    lending: import('zod').ZodBoolean;
                }, "strip", import('zod').ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", import('zod').ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, import('zod').ZodObject<import("zod").objectUtil.extendShape<{
                id: import('zod').ZodString;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                tokenAddress: import('zod').ZodOptional<import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }, {
                id: import('zod').ZodString;
                data: import('zod').ZodObject<{
                    delegatingTo: import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", import('zod').ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }>, "strip", import('zod').ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, import('zod').ZodObject<import("zod").objectUtil.extendShape<{
                id: import('zod').ZodString;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                tokenAddress: import('zod').ZodOptional<import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }, {
                data: import('zod').ZodObject<{
                    apy: import('zod').ZodString;
                    totalApy: import('zod').ZodString;
                }, "strip", import('zod').ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }>, "strip", import('zod').ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, import('zod').ZodObject<import("zod").objectUtil.extendShape<{
                id: import('zod').ZodString;
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                tokenAddress: import('zod').ZodOptional<import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: import('zod').ZodRecord<import('zod').ZodString, import('zod').ZodString>;
            }, {
                investmentId: import('zod').ZodOptional<import('zod').ZodString>;
                data: import('zod').ZodObject<{
                    stakerInfo: import('zod').ZodObject<{
                        name: import('zod').ZodOptional<import('zod').ZodString>;
                        iconUrl: import('zod').ZodOptional<import('zod').ZodString>;
                        address: import('zod').ZodEffects<import('zod').ZodPipeline<import('zod').ZodString, import('zod').ZodEffects<import('zod').ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", import('zod').ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: import('zod').ZodString;
                    stakedAmount: import('zod').ZodString;
                    pendingWithdrawal: import('zod').ZodOptional<import('zod').ZodObject<{
                        amount: import('zod').ZodString;
                        withdrawableAfter: import('zod').ZodNumber;
                    }, "strip", import('zod').ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: import('zod').ZodOptional<import('zod').ZodString>;
                    totalApy: import('zod').ZodOptional<import('zod').ZodString>;
                }, "strip", import('zod').ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", import('zod').ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, import('zod').ZodTypeAny, "passthrough">[];
    }[]>;
}
