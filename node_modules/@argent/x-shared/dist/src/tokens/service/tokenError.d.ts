import { BaseErrorPayload, BaseError } from '../../errors/baseErrors';
export declare enum TOKEN_ERROR_MESSAGES {
    NO_TOKEN_API_URL = "NO_TOKEN_API_URL is not defined",
    NO_TOKEN_PRICE_API_URL = "NO_TOKEN_PRICE_API_URL is not defined",
    TOKENS_DEFI_DECOMPOSITION_URL = "TOKENS_DEFI_DECOMPOSITION_URL is not defined",
    TOKENS_AIRDROPS_API_URL = "TOKENS_AIRDROPS_API_URL is not defined",
    TOKEN_PARSING_ERROR = "Unable to parse token data response",
    TOKEN_PRICE_PARSING_ERROR = "Unable to parse token price response",
    TOKEN_DEFI_DECOMPOSITION_PARSING_ERROR = "Unable to parse token defi decomposition response",
    TOKEN_PRICE_NOT_FOUND = "Token price not found",
    TOKEN_NOT_FOUND = "Token not found",
    TOKEN_DETAILS_NOT_FOUND = "Token details not found",
    FEE_TOKEN_NOT_FOUND = "Fee token not found",
    UNABLE_TO_CALCULATE_CURRENCY_VALUE = "Unable to calculate currency value",
    UNSAFE_DECIMALS = "Unsafe decimals in token"
}
export type TokenValidationErrorMessage = keyof typeof TOKEN_ERROR_MESSAGES;
export declare class TokenError extends BaseError<TokenValidationErrorMessage> {
    constructor(payload: BaseErrorPayload<TokenValidationErrorMessage>);
}
