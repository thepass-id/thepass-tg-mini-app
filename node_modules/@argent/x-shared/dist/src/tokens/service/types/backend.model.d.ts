import { z } from 'zod';
export declare const apiAccountTokenBalancesSchema: z.ZodUnion<[z.ZodObject<{
    status: z.ZodLiteral<"initialising">;
}, "strip", z.ZodTypeAny, {
    status: "initialising";
}, {
    status: "initialising";
}>, z.ZodObject<{
    status: z.ZodLiteral<"initialised">;
    balances: z.ZodArray<z.ZodObject<{
        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        tokenBalance: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        tokenAddress: `0x${string}`;
        tokenBalance: string;
    }, {
        tokenAddress: string;
        tokenBalance: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "initialised";
    balances: {
        tokenAddress: `0x${string}`;
        tokenBalance: string;
    }[];
}, {
    status: "initialised";
    balances: {
        tokenAddress: string;
        tokenBalance: string;
    }[];
}>]>;
export type ApiAccountTokenBalances = z.infer<typeof apiAccountTokenBalancesSchema>;
export declare const apiTokenInfoSchema: z.ZodObject<{
    id: z.ZodNumber;
    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    brandColor: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    symbol: z.ZodString;
    decimals: z.ZodNumber;
    iconUrl: z.ZodOptional<z.ZodString>;
    sendable: z.ZodBoolean;
    popular: z.ZodBoolean;
    refundable: z.ZodBoolean;
    listed: z.ZodBoolean;
    tradable: z.ZodBoolean;
    category: z.ZodUnion<[z.ZodLiteral<"tokens">, z.ZodLiteral<"currencies">, z.ZodLiteral<"savings">]>;
    pricingId: z.ZodOptional<z.ZodNumber>;
    dappId: z.ZodOptional<z.ZodString>;
    marketData: z.ZodOptional<z.ZodObject<{
        marketCap: z.ZodNumber;
        marketCap24hChange: z.ZodNumber;
        dailyVolume: z.ZodNumber;
        rank: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    }, {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    }>>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    name: string;
    address: `0x${string}`;
    decimals: number;
    id: number;
    category: "tokens" | "currencies" | "savings";
    sendable: boolean;
    popular: boolean;
    refundable: boolean;
    listed: boolean;
    tradable: boolean;
    dappId?: string | undefined;
    brandColor?: string | undefined;
    iconUrl?: string | undefined;
    pricingId?: number | undefined;
    marketData?: {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    } | undefined;
    tags?: string[] | undefined;
}, {
    symbol: string;
    name: string;
    address: string;
    decimals: number;
    id: number;
    category: "tokens" | "currencies" | "savings";
    sendable: boolean;
    popular: boolean;
    refundable: boolean;
    listed: boolean;
    tradable: boolean;
    dappId?: string | undefined;
    brandColor?: string | undefined;
    iconUrl?: string | undefined;
    pricingId?: number | undefined;
    marketData?: {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    } | undefined;
    tags?: string[] | undefined;
}>;
export type ApiTokenInfo = z.infer<typeof apiTokenInfoSchema>;
export declare const apiTokensInfoResponseSchema: z.ZodObject<{
    tokens: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        brandColor: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        symbol: z.ZodString;
        decimals: z.ZodNumber;
        iconUrl: z.ZodOptional<z.ZodString>;
        sendable: z.ZodBoolean;
        popular: z.ZodBoolean;
        refundable: z.ZodBoolean;
        listed: z.ZodBoolean;
        tradable: z.ZodBoolean;
        category: z.ZodUnion<[z.ZodLiteral<"tokens">, z.ZodLiteral<"currencies">, z.ZodLiteral<"savings">]>;
        pricingId: z.ZodOptional<z.ZodNumber>;
        dappId: z.ZodOptional<z.ZodString>;
        marketData: z.ZodOptional<z.ZodObject<{
            marketCap: z.ZodNumber;
            marketCap24hChange: z.ZodNumber;
            dailyVolume: z.ZodNumber;
            rank: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        }, {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        }>>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        symbol: string;
        name: string;
        address: `0x${string}`;
        decimals: number;
        id: number;
        category: "tokens" | "currencies" | "savings";
        sendable: boolean;
        popular: boolean;
        refundable: boolean;
        listed: boolean;
        tradable: boolean;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        iconUrl?: string | undefined;
        pricingId?: number | undefined;
        marketData?: {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        } | undefined;
        tags?: string[] | undefined;
    }, {
        symbol: string;
        name: string;
        address: string;
        decimals: number;
        id: number;
        category: "tokens" | "currencies" | "savings";
        sendable: boolean;
        popular: boolean;
        refundable: boolean;
        listed: boolean;
        tradable: boolean;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        iconUrl?: string | undefined;
        pricingId?: number | undefined;
        marketData?: {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        } | undefined;
        tags?: string[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    tokens: {
        symbol: string;
        name: string;
        address: `0x${string}`;
        decimals: number;
        id: number;
        category: "tokens" | "currencies" | "savings";
        sendable: boolean;
        popular: boolean;
        refundable: boolean;
        listed: boolean;
        tradable: boolean;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        iconUrl?: string | undefined;
        pricingId?: number | undefined;
        marketData?: {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        } | undefined;
        tags?: string[] | undefined;
    }[];
}, {
    tokens: {
        symbol: string;
        name: string;
        address: string;
        decimals: number;
        id: number;
        category: "tokens" | "currencies" | "savings";
        sendable: boolean;
        popular: boolean;
        refundable: boolean;
        listed: boolean;
        tradable: boolean;
        dappId?: string | undefined;
        brandColor?: string | undefined;
        iconUrl?: string | undefined;
        pricingId?: number | undefined;
        marketData?: {
            marketCap: number;
            marketCap24hChange: number;
            dailyVolume: number;
            rank: number;
        } | undefined;
        tags?: string[] | undefined;
    }[];
}>;
export declare const apiTokenInfoResponseSchema: z.ZodObject<{
    id: z.ZodNumber;
    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    brandColor: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    symbol: z.ZodString;
    decimals: z.ZodNumber;
    iconUrl: z.ZodOptional<z.ZodString>;
    sendable: z.ZodBoolean;
    popular: z.ZodBoolean;
    refundable: z.ZodBoolean;
    listed: z.ZodBoolean;
    tradable: z.ZodBoolean;
    category: z.ZodUnion<[z.ZodLiteral<"tokens">, z.ZodLiteral<"currencies">, z.ZodLiteral<"savings">]>;
    pricingId: z.ZodOptional<z.ZodNumber>;
    dappId: z.ZodOptional<z.ZodString>;
    marketData: z.ZodOptional<z.ZodObject<{
        marketCap: z.ZodNumber;
        marketCap24hChange: z.ZodNumber;
        dailyVolume: z.ZodNumber;
        rank: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    }, {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    }>>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    name: string;
    address: `0x${string}`;
    decimals: number;
    id: number;
    category: "tokens" | "currencies" | "savings";
    sendable: boolean;
    popular: boolean;
    refundable: boolean;
    listed: boolean;
    tradable: boolean;
    dappId?: string | undefined;
    brandColor?: string | undefined;
    iconUrl?: string | undefined;
    pricingId?: number | undefined;
    marketData?: {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    } | undefined;
    tags?: string[] | undefined;
}, {
    symbol: string;
    name: string;
    address: string;
    decimals: number;
    id: number;
    category: "tokens" | "currencies" | "savings";
    sendable: boolean;
    popular: boolean;
    refundable: boolean;
    listed: boolean;
    tradable: boolean;
    dappId?: string | undefined;
    brandColor?: string | undefined;
    iconUrl?: string | undefined;
    pricingId?: number | undefined;
    marketData?: {
        marketCap: number;
        marketCap24hChange: number;
        dailyVolume: number;
        rank: number;
    } | undefined;
    tags?: string[] | undefined;
}>;
export type ApiTokensInfoResponse = z.infer<typeof apiTokensInfoResponseSchema>;
export type ApiTokenInfoResponse = z.infer<typeof apiTokenInfoResponseSchema>;
export declare const apiPriceDetailsSchema: z.ZodObject<{
    pricingId: z.ZodNumber;
    ethValue: z.ZodString;
    ccyValue: z.ZodString;
    ethDayChange: z.ZodString;
    ccyDayChange: z.ZodString;
}, "strip", z.ZodTypeAny, {
    pricingId: number;
    ethValue: string;
    ccyValue: string;
    ethDayChange: string;
    ccyDayChange: string;
}, {
    pricingId: number;
    ethValue: string;
    ccyValue: string;
    ethDayChange: string;
    ccyDayChange: string;
}>;
export declare const apiPriceDataResponseSchema: z.ZodObject<{
    prices: z.ZodArray<z.ZodObject<{
        pricingId: z.ZodNumber;
        ethValue: z.ZodString;
        ccyValue: z.ZodString;
        ethDayChange: z.ZodString;
        ccyDayChange: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        pricingId: number;
        ethValue: string;
        ccyValue: string;
        ethDayChange: string;
        ccyDayChange: string;
    }, {
        pricingId: number;
        ethValue: string;
        ccyValue: string;
        ethDayChange: string;
        ccyDayChange: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    prices: {
        pricingId: number;
        ethValue: string;
        ccyValue: string;
        ethDayChange: string;
        ccyDayChange: string;
    }[];
}, {
    prices: {
        pricingId: number;
        ethValue: string;
        ccyValue: string;
        ethDayChange: string;
        ccyDayChange: string;
    }[];
}>;
export type ApiPriceDetails = z.infer<typeof apiPriceDetailsSchema>;
export type ApiPriceDataResponse = z.infer<typeof apiPriceDataResponseSchema>;
export declare const apiDefiDecompositionToken: z.ZodObject<{
    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    principal: z.ZodString;
    accruedFees: z.ZodString;
    minPrice: z.ZodString;
    maxPrice: z.ZodString;
    currentPrice: z.ZodString;
}, "strip", z.ZodTypeAny, {
    tokenAddress: `0x${string}`;
    principal: string;
    accruedFees: string;
    minPrice: string;
    maxPrice: string;
    currentPrice: string;
}, {
    tokenAddress: string;
    principal: string;
    accruedFees: string;
    minPrice: string;
    maxPrice: string;
    currentPrice: string;
}>;
export type ApiDefiDecompositionToken = z.infer<typeof apiDefiDecompositionToken>;
export declare const apiConcentratedLiquidityPositionSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    tokenId: z.ZodString;
    data: z.ZodObject<{
        poolFeePercentage: z.ZodString;
        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
        token0: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
        token1: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>;
export declare const apiConcentratedLiquidityPositionsSchema: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    tokenId: z.ZodString;
    data: z.ZodObject<{
        poolFeePercentage: z.ZodString;
        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
        token0: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
        token1: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, "many">;
export declare const apiStakingPositionSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodString;
        totalApy: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        totalApy: string;
        apy: string;
    }, {
        totalApy: string;
        apy: string;
    }>;
    investmentId: z.ZodOptional<z.ZodString>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>;
export declare const apiStakingPositionsSchema: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodString;
        totalApy: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        totalApy: string;
        apy: string;
    }, {
        totalApy: string;
        apy: string;
    }>;
    investmentId: z.ZodOptional<z.ZodString>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, "many">;
export declare const apiCollateralizedDebtPositionSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodNumber>;
        collateral: z.ZodBoolean;
        debt: z.ZodBoolean;
        lending: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>;
export declare const apiCollateralizedDebtPositionsSchema: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodNumber>;
        collateral: z.ZodBoolean;
        debt: z.ZodBoolean;
        lending: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, "many">;
export declare const apiDelegatedTokensSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    id: z.ZodString;
    data: z.ZodObject<{
        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        delegatingTo: `0x${string}`;
    }, {
        delegatingTo: string;
    }>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        delegatingTo: `0x${string}`;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        delegatingTo: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>;
export declare const apiDelegatedTokensArraySchema: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    id: z.ZodString;
    data: z.ZodObject<{
        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        delegatingTo: `0x${string}`;
    }, {
        delegatingTo: string;
    }>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        delegatingTo: `0x${string}`;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        delegatingTo: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, "many">;
export declare const apiStrkDelegatedStakingSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    investmentId: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        accruedRewards: z.ZodString;
        stakedAmount: z.ZodString;
        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
            amount: z.ZodString;
            withdrawableAfter: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            withdrawableAfter: number;
        }, {
            amount: string;
            withdrawableAfter: number;
        }>>;
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }, {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>;
export declare const apiStrkDelegatedStakingPositionsSchema: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    investmentId: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        accruedRewards: z.ZodString;
        stakedAmount: z.ZodString;
        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
            amount: z.ZodString;
            withdrawableAfter: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            withdrawableAfter: number;
        }, {
            amount: string;
            withdrawableAfter: number;
        }>>;
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }, {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, "many">;
export declare const apiDefiPositionSchema: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    tokenId: z.ZodString;
    data: z.ZodObject<{
        poolFeePercentage: z.ZodString;
        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
        token0: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
        token1: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodNumber>;
        collateral: z.ZodBoolean;
        debt: z.ZodBoolean;
        lending: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    id: z.ZodString;
    data: z.ZodObject<{
        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        delegatingTo: `0x${string}`;
    }, {
        delegatingTo: string;
    }>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        delegatingTo: `0x${string}`;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        delegatingTo: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodString;
        totalApy: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        totalApy: string;
        apy: string;
    }, {
        totalApy: string;
        apy: string;
    }>;
    investmentId: z.ZodOptional<z.ZodString>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    investmentId: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        accruedRewards: z.ZodString;
        stakedAmount: z.ZodString;
        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
            amount: z.ZodString;
            withdrawableAfter: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            withdrawableAfter: number;
        }, {
            amount: string;
            withdrawableAfter: number;
        }>>;
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }, {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>;
export type ApiDefiPosition = z.infer<typeof apiDefiPositionSchema>;
export declare const apiDefiDecompositionProducts: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    tokenId: z.ZodString;
    data: z.ZodObject<{
        poolFeePercentage: z.ZodString;
        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
        token0: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
        token1: z.ZodObject<{
            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            principal: z.ZodString;
            accruedFees: z.ZodString;
            minPrice: z.ZodString;
            maxPrice: z.ZodString;
            currentPrice: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }, {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }, {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: `0x${string}`;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        poolFeePercentage: string;
        token0: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        token1: {
            tokenAddress: string;
            principal: string;
            accruedFees: string;
            minPrice: string;
            maxPrice: string;
            currentPrice: string;
        };
        tickSpacingPercentage?: string | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenId: string;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodNumber>;
        collateral: z.ZodBoolean;
        debt: z.ZodBoolean;
        lending: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }, {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        lending: boolean;
        collateral: boolean;
        debt: boolean;
        totalApy?: string | undefined;
        apy?: string | undefined;
        group?: number | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    id: z.ZodString;
    data: z.ZodObject<{
        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    }, "strip", z.ZodTypeAny, {
        delegatingTo: `0x${string}`;
    }, {
        delegatingTo: string;
    }>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        delegatingTo: `0x${string}`;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        delegatingTo: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    data: z.ZodObject<{
        apy: z.ZodString;
        totalApy: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        totalApy: string;
        apy: string;
    }, {
        totalApy: string;
        apy: string;
    }>;
    investmentId: z.ZodOptional<z.ZodString>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        totalApy: string;
        apy: string;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    investmentId: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
}, {
    investmentId: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        stakerInfo: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            iconUrl: z.ZodOptional<z.ZodString>;
            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }, {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        }>;
        accruedRewards: z.ZodString;
        stakedAmount: z.ZodString;
        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
            amount: z.ZodString;
            withdrawableAfter: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            withdrawableAfter: number;
        }, {
            amount: string;
            withdrawableAfter: number;
        }>>;
        apy: z.ZodOptional<z.ZodString>;
        totalApy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }, {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    data: {
        stakerInfo: {
            address: `0x${string}`;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: `0x${string}` | undefined;
    investmentId?: string | undefined;
}, {
    data: {
        stakerInfo: {
            address: string;
            name?: string | undefined;
            iconUrl?: string | undefined;
        };
        accruedRewards: string;
        stakedAmount: string;
        totalApy?: string | undefined;
        apy?: string | undefined;
        pendingWithdrawal?: {
            amount: string;
            withdrawableAfter: number;
        } | undefined;
    };
    id: string;
    totalBalances: Record<string, string>;
    tokenAddress?: string | undefined;
    investmentId?: string | undefined;
}>]>, "many">;
export declare const apiDefiDecompositionProduct: z.ZodEffects<z.ZodObject<{
    productId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    manageUrl: z.ZodOptional<z.ZodString>;
    type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
    groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        healthRatio: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }>>>;
    positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        tokenId: z.ZodString;
        data: z.ZodObject<{
            poolFeePercentage: z.ZodString;
            tickSpacingPercentage: z.ZodOptional<z.ZodString>;
            token0: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
            token1: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
            group: z.ZodOptional<z.ZodNumber>;
            collateral: z.ZodBoolean;
            debt: z.ZodBoolean;
            lending: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        id: z.ZodString;
        data: z.ZodObject<{
            delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            delegatingTo: `0x${string}`;
        }, {
            delegatingTo: string;
        }>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            delegatingTo: `0x${string}`;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            delegatingTo: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodString;
            totalApy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalApy: string;
            apy: string;
        }, {
            totalApy: string;
            apy: string;
        }>;
        investmentId: z.ZodOptional<z.ZodString>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        investmentId: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            accruedRewards: z.ZodString;
            stakedAmount: z.ZodString;
            pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                amount: z.ZodString;
                withdrawableAfter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: string;
                withdrawableAfter: number;
            }, {
                amount: string;
                withdrawableAfter: number;
            }>>;
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }, {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, "many">;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    productId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    manageUrl: z.ZodOptional<z.ZodString>;
    type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
    groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        healthRatio: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }>>>;
    positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        tokenId: z.ZodString;
        data: z.ZodObject<{
            poolFeePercentage: z.ZodString;
            tickSpacingPercentage: z.ZodOptional<z.ZodString>;
            token0: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
            token1: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
            group: z.ZodOptional<z.ZodNumber>;
            collateral: z.ZodBoolean;
            debt: z.ZodBoolean;
            lending: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        id: z.ZodString;
        data: z.ZodObject<{
            delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            delegatingTo: `0x${string}`;
        }, {
            delegatingTo: string;
        }>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            delegatingTo: `0x${string}`;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            delegatingTo: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodString;
            totalApy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalApy: string;
            apy: string;
        }, {
            totalApy: string;
            apy: string;
        }>;
        investmentId: z.ZodOptional<z.ZodString>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        investmentId: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            accruedRewards: z.ZodString;
            stakedAmount: z.ZodString;
            pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                amount: z.ZodString;
                withdrawableAfter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: string;
                withdrawableAfter: number;
            }, {
                amount: string;
                withdrawableAfter: number;
            }>>;
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }, {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    productId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    manageUrl: z.ZodOptional<z.ZodString>;
    type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
    groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        healthRatio: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }>>>;
    positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        tokenId: z.ZodString;
        data: z.ZodObject<{
            poolFeePercentage: z.ZodString;
            tickSpacingPercentage: z.ZodOptional<z.ZodString>;
            token0: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
            token1: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
            group: z.ZodOptional<z.ZodNumber>;
            collateral: z.ZodBoolean;
            debt: z.ZodBoolean;
            lending: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        id: z.ZodString;
        data: z.ZodObject<{
            delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            delegatingTo: `0x${string}`;
        }, {
            delegatingTo: string;
        }>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            delegatingTo: `0x${string}`;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            delegatingTo: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodString;
            totalApy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalApy: string;
            apy: string;
        }, {
            totalApy: string;
            apy: string;
        }>;
        investmentId: z.ZodOptional<z.ZodString>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        investmentId: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            accruedRewards: z.ZodString;
            stakedAmount: z.ZodString;
            pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                amount: z.ZodString;
                withdrawableAfter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: string;
                withdrawableAfter: number;
            }, {
                amount: string;
                withdrawableAfter: number;
            }>>;
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }, {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, "many">;
}, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
    productId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    manageUrl: z.ZodOptional<z.ZodString>;
    type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
    groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        healthRatio: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }>>>;
    positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        tokenId: z.ZodString;
        data: z.ZodObject<{
            poolFeePercentage: z.ZodString;
            tickSpacingPercentage: z.ZodOptional<z.ZodString>;
            token0: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
            token1: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
            group: z.ZodOptional<z.ZodNumber>;
            collateral: z.ZodBoolean;
            debt: z.ZodBoolean;
            lending: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        id: z.ZodString;
        data: z.ZodObject<{
            delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            delegatingTo: `0x${string}`;
        }, {
            delegatingTo: string;
        }>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            delegatingTo: `0x${string}`;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            delegatingTo: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodString;
            totalApy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalApy: string;
            apy: string;
        }, {
            totalApy: string;
            apy: string;
        }>;
        investmentId: z.ZodOptional<z.ZodString>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        investmentId: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            accruedRewards: z.ZodString;
            stakedAmount: z.ZodString;
            pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                amount: z.ZodString;
                withdrawableAfter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: string;
                withdrawableAfter: number;
            }, {
                amount: string;
                withdrawableAfter: number;
            }>>;
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }, {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, "many">;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    productId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    manageUrl: z.ZodOptional<z.ZodString>;
    type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
    groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        healthRatio: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }, {
        name?: string | undefined;
        healthRatio?: string | undefined;
    }>>>;
    positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        tokenId: z.ZodString;
        data: z.ZodObject<{
            poolFeePercentage: z.ZodString;
            tickSpacingPercentage: z.ZodOptional<z.ZodString>;
            token0: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
            token1: z.ZodObject<{
                tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                principal: z.ZodString;
                accruedFees: z.ZodString;
                minPrice: z.ZodString;
                maxPrice: z.ZodString;
                currentPrice: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }, {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }, {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: `0x${string}`;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            poolFeePercentage: string;
            token0: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            token1: {
                tokenAddress: string;
                principal: string;
                accruedFees: string;
                minPrice: string;
                maxPrice: string;
                currentPrice: string;
            };
            tickSpacingPercentage?: string | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenId: string;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
            group: z.ZodOptional<z.ZodNumber>;
            collateral: z.ZodBoolean;
            debt: z.ZodBoolean;
            lending: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }, {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            lending: boolean;
            collateral: boolean;
            debt: boolean;
            totalApy?: string | undefined;
            apy?: string | undefined;
            group?: number | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        id: z.ZodString;
        data: z.ZodObject<{
            delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            delegatingTo: `0x${string}`;
        }, {
            delegatingTo: string;
        }>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            delegatingTo: `0x${string}`;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            delegatingTo: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        data: z.ZodObject<{
            apy: z.ZodString;
            totalApy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            totalApy: string;
            apy: string;
        }, {
            totalApy: string;
            apy: string;
        }>;
        investmentId: z.ZodOptional<z.ZodString>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            totalApy: string;
            apy: string;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        investmentId: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
        totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
    }, {
        investmentId: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            stakerInfo: z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                iconUrl: z.ZodOptional<z.ZodString>;
                address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }, {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            }>;
            accruedRewards: z.ZodString;
            stakedAmount: z.ZodString;
            pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                amount: z.ZodString;
                withdrawableAfter: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                amount: string;
                withdrawableAfter: number;
            }, {
                amount: string;
                withdrawableAfter: number;
            }>>;
            apy: z.ZodOptional<z.ZodString>;
            totalApy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }, {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        data: {
            stakerInfo: {
                address: `0x${string}`;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: `0x${string}` | undefined;
        investmentId?: string | undefined;
    }, {
        data: {
            stakerInfo: {
                address: string;
                name?: string | undefined;
                iconUrl?: string | undefined;
            };
            accruedRewards: string;
            stakedAmount: string;
            totalApy?: string | undefined;
            apy?: string | undefined;
            pendingWithdrawal?: {
                amount: string;
                withdrawableAfter: number;
            } | undefined;
        };
        id: string;
        totalBalances: Record<string, string>;
        tokenAddress?: string | undefined;
        investmentId?: string | undefined;
    }>]>, "many">;
}, z.ZodTypeAny, "passthrough">> & {
    extend: <E extends z.ZodRawShape>(extension: E) => z.ZodEffects<z.ZodObject<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    } & E, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    } & E, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    } & E, z.ZodTypeAny, "passthrough">>;
};
export declare const apiDefiDecompositionSchema: z.ZodObject<{
    dappId: z.ZodString;
    products: z.ZodArray<z.ZodEffects<z.ZodObject<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">> & {
        extend: <E extends z.ZodRawShape>(extension: E) => z.ZodEffects<z.ZodObject<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        } & E, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        } & E, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        } & E, z.ZodTypeAny, "passthrough">>;
    }, "many">;
}, "strip", z.ZodTypeAny, {
    dappId: string;
    products: z.objectOutputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">[];
}, {
    dappId: string;
    products: z.objectInputType<{
        productId: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        manageUrl: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
        groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            healthRatio: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }, {
            name?: string | undefined;
            healthRatio?: string | undefined;
        }>>>;
        positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            tokenId: z.ZodString;
            data: z.ZodObject<{
                poolFeePercentage: z.ZodString;
                tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                token0: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
                token1: z.ZodObject<{
                    tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                    principal: z.ZodString;
                    accruedFees: z.ZodString;
                    minPrice: z.ZodString;
                    maxPrice: z.ZodString;
                    currentPrice: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }, {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }, {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: `0x${string}`;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                poolFeePercentage: string;
                token0: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                token1: {
                    tokenAddress: string;
                    principal: string;
                    accruedFees: string;
                    minPrice: string;
                    maxPrice: string;
                    currentPrice: string;
                };
                tickSpacingPercentage?: string | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenId: string;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
                group: z.ZodOptional<z.ZodNumber>;
                collateral: z.ZodBoolean;
                debt: z.ZodBoolean;
                lending: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }, {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                lending: boolean;
                collateral: boolean;
                debt: boolean;
                totalApy?: string | undefined;
                apy?: string | undefined;
                group?: number | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            id: z.ZodString;
            data: z.ZodObject<{
                delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
            }, "strip", z.ZodTypeAny, {
                delegatingTo: `0x${string}`;
            }, {
                delegatingTo: string;
            }>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                delegatingTo: `0x${string}`;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                delegatingTo: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            data: z.ZodObject<{
                apy: z.ZodString;
                totalApy: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                totalApy: string;
                apy: string;
            }, {
                totalApy: string;
                apy: string;
            }>;
            investmentId: z.ZodOptional<z.ZodString>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                totalApy: string;
                apy: string;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            investmentId: z.ZodOptional<z.ZodString>;
            tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
            totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
        }, {
            investmentId: z.ZodOptional<z.ZodString>;
            data: z.ZodObject<{
                stakerInfo: z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    iconUrl: z.ZodOptional<z.ZodString>;
                    address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }, {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                }>;
                accruedRewards: z.ZodString;
                stakedAmount: z.ZodString;
                pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                    amount: z.ZodString;
                    withdrawableAfter: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    amount: string;
                    withdrawableAfter: number;
                }, {
                    amount: string;
                    withdrawableAfter: number;
                }>>;
                apy: z.ZodOptional<z.ZodString>;
                totalApy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }, {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            data: {
                stakerInfo: {
                    address: `0x${string}`;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: `0x${string}` | undefined;
            investmentId?: string | undefined;
        }, {
            data: {
                stakerInfo: {
                    address: string;
                    name?: string | undefined;
                    iconUrl?: string | undefined;
                };
                accruedRewards: string;
                stakedAmount: string;
                totalApy?: string | undefined;
                apy?: string | undefined;
                pendingWithdrawal?: {
                    amount: string;
                    withdrawableAfter: number;
                } | undefined;
            };
            id: string;
            totalBalances: Record<string, string>;
            tokenAddress?: string | undefined;
            investmentId?: string | undefined;
        }>]>, "many">;
    }, z.ZodTypeAny, "passthrough">[];
}>;
export declare const apiDefiPositionsSchema: z.ZodObject<{
    dapps: z.ZodArray<z.ZodObject<{
        dappId: z.ZodString;
        products: z.ZodArray<z.ZodEffects<z.ZodObject<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">> & {
            extend: <E extends z.ZodRawShape>(extension: E) => z.ZodEffects<z.ZodObject<{
                productId: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                manageUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
                groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    healthRatio: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }>>>;
                positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    tokenId: z.ZodString;
                    data: z.ZodObject<{
                        poolFeePercentage: z.ZodString;
                        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                        token0: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                        token1: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                        group: z.ZodOptional<z.ZodNumber>;
                        collateral: z.ZodBoolean;
                        debt: z.ZodBoolean;
                        lending: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    id: z.ZodString;
                    data: z.ZodObject<{
                        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        delegatingTo: `0x${string}`;
                    }, {
                        delegatingTo: string;
                    }>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        delegatingTo: `0x${string}`;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        delegatingTo: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodString;
                        totalApy: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        totalApy: string;
                        apy: string;
                    }, {
                        totalApy: string;
                        apy: string;
                    }>;
                    investmentId: z.ZodOptional<z.ZodString>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    investmentId: z.ZodOptional<z.ZodString>;
                    data: z.ZodObject<{
                        stakerInfo: z.ZodObject<{
                            name: z.ZodOptional<z.ZodString>;
                            iconUrl: z.ZodOptional<z.ZodString>;
                            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                        }, "strip", z.ZodTypeAny, {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }, {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }>;
                        accruedRewards: z.ZodString;
                        stakedAmount: z.ZodString;
                        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                            amount: z.ZodString;
                            withdrawableAfter: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            amount: string;
                            withdrawableAfter: number;
                        }, {
                            amount: string;
                            withdrawableAfter: number;
                        }>>;
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }, {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, "many">;
            } & E, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                productId: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                manageUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
                groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    healthRatio: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }>>>;
                positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    tokenId: z.ZodString;
                    data: z.ZodObject<{
                        poolFeePercentage: z.ZodString;
                        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                        token0: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                        token1: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                        group: z.ZodOptional<z.ZodNumber>;
                        collateral: z.ZodBoolean;
                        debt: z.ZodBoolean;
                        lending: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    id: z.ZodString;
                    data: z.ZodObject<{
                        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        delegatingTo: `0x${string}`;
                    }, {
                        delegatingTo: string;
                    }>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        delegatingTo: `0x${string}`;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        delegatingTo: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodString;
                        totalApy: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        totalApy: string;
                        apy: string;
                    }, {
                        totalApy: string;
                        apy: string;
                    }>;
                    investmentId: z.ZodOptional<z.ZodString>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    investmentId: z.ZodOptional<z.ZodString>;
                    data: z.ZodObject<{
                        stakerInfo: z.ZodObject<{
                            name: z.ZodOptional<z.ZodString>;
                            iconUrl: z.ZodOptional<z.ZodString>;
                            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                        }, "strip", z.ZodTypeAny, {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }, {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }>;
                        accruedRewards: z.ZodString;
                        stakedAmount: z.ZodString;
                        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                            amount: z.ZodString;
                            withdrawableAfter: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            amount: string;
                            withdrawableAfter: number;
                        }, {
                            amount: string;
                            withdrawableAfter: number;
                        }>>;
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }, {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, "many">;
            } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                productId: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                manageUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
                groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    healthRatio: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }>>>;
                positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    tokenId: z.ZodString;
                    data: z.ZodObject<{
                        poolFeePercentage: z.ZodString;
                        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                        token0: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                        token1: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                        group: z.ZodOptional<z.ZodNumber>;
                        collateral: z.ZodBoolean;
                        debt: z.ZodBoolean;
                        lending: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    id: z.ZodString;
                    data: z.ZodObject<{
                        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        delegatingTo: `0x${string}`;
                    }, {
                        delegatingTo: string;
                    }>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        delegatingTo: `0x${string}`;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        delegatingTo: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodString;
                        totalApy: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        totalApy: string;
                        apy: string;
                    }, {
                        totalApy: string;
                        apy: string;
                    }>;
                    investmentId: z.ZodOptional<z.ZodString>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    investmentId: z.ZodOptional<z.ZodString>;
                    data: z.ZodObject<{
                        stakerInfo: z.ZodObject<{
                            name: z.ZodOptional<z.ZodString>;
                            iconUrl: z.ZodOptional<z.ZodString>;
                            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                        }, "strip", z.ZodTypeAny, {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }, {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }>;
                        accruedRewards: z.ZodString;
                        stakedAmount: z.ZodString;
                        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                            amount: z.ZodString;
                            withdrawableAfter: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            amount: string;
                            withdrawableAfter: number;
                        }, {
                            amount: string;
                            withdrawableAfter: number;
                        }>>;
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }, {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, "many">;
            } & E, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
                productId: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                manageUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
                groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    healthRatio: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }>>>;
                positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    tokenId: z.ZodString;
                    data: z.ZodObject<{
                        poolFeePercentage: z.ZodString;
                        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                        token0: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                        token1: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                        group: z.ZodOptional<z.ZodNumber>;
                        collateral: z.ZodBoolean;
                        debt: z.ZodBoolean;
                        lending: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    id: z.ZodString;
                    data: z.ZodObject<{
                        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        delegatingTo: `0x${string}`;
                    }, {
                        delegatingTo: string;
                    }>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        delegatingTo: `0x${string}`;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        delegatingTo: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodString;
                        totalApy: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        totalApy: string;
                        apy: string;
                    }, {
                        totalApy: string;
                        apy: string;
                    }>;
                    investmentId: z.ZodOptional<z.ZodString>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    investmentId: z.ZodOptional<z.ZodString>;
                    data: z.ZodObject<{
                        stakerInfo: z.ZodObject<{
                            name: z.ZodOptional<z.ZodString>;
                            iconUrl: z.ZodOptional<z.ZodString>;
                            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                        }, "strip", z.ZodTypeAny, {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }, {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }>;
                        accruedRewards: z.ZodString;
                        stakedAmount: z.ZodString;
                        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                            amount: z.ZodString;
                            withdrawableAfter: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            amount: string;
                            withdrawableAfter: number;
                        }, {
                            amount: string;
                            withdrawableAfter: number;
                        }>>;
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }, {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, "many">;
            } & E, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                productId: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                manageUrl: z.ZodOptional<z.ZodString>;
                type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
                groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    healthRatio: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }, {
                    name?: string | undefined;
                    healthRatio?: string | undefined;
                }>>>;
                positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    tokenId: z.ZodString;
                    data: z.ZodObject<{
                        poolFeePercentage: z.ZodString;
                        tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                        token0: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                        token1: z.ZodObject<{
                            tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                            principal: z.ZodString;
                            accruedFees: z.ZodString;
                            minPrice: z.ZodString;
                            maxPrice: z.ZodString;
                            currentPrice: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }, {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }, {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: `0x${string}`;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        poolFeePercentage: string;
                        token0: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        token1: {
                            tokenAddress: string;
                            principal: string;
                            accruedFees: string;
                            minPrice: string;
                            maxPrice: string;
                            currentPrice: string;
                        };
                        tickSpacingPercentage?: string | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenId: string;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                        group: z.ZodOptional<z.ZodNumber>;
                        collateral: z.ZodBoolean;
                        debt: z.ZodBoolean;
                        lending: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }, {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        lending: boolean;
                        collateral: boolean;
                        debt: boolean;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        group?: number | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    id: z.ZodString;
                    data: z.ZodObject<{
                        delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        delegatingTo: `0x${string}`;
                    }, {
                        delegatingTo: string;
                    }>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        delegatingTo: `0x${string}`;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        delegatingTo: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    data: z.ZodObject<{
                        apy: z.ZodString;
                        totalApy: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        totalApy: string;
                        apy: string;
                    }, {
                        totalApy: string;
                        apy: string;
                    }>;
                    investmentId: z.ZodOptional<z.ZodString>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        totalApy: string;
                        apy: string;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, z.ZodObject<z.objectUtil.extendShape<{
                    id: z.ZodString;
                    investmentId: z.ZodOptional<z.ZodString>;
                    tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                    totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
                }, {
                    investmentId: z.ZodOptional<z.ZodString>;
                    data: z.ZodObject<{
                        stakerInfo: z.ZodObject<{
                            name: z.ZodOptional<z.ZodString>;
                            iconUrl: z.ZodOptional<z.ZodString>;
                            address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                        }, "strip", z.ZodTypeAny, {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }, {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        }>;
                        accruedRewards: z.ZodString;
                        stakedAmount: z.ZodString;
                        pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                            amount: z.ZodString;
                            withdrawableAfter: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            amount: string;
                            withdrawableAfter: number;
                        }, {
                            amount: string;
                            withdrawableAfter: number;
                        }>>;
                        apy: z.ZodOptional<z.ZodString>;
                        totalApy: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }, {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    }>;
                }>, "strip", z.ZodTypeAny, {
                    data: {
                        stakerInfo: {
                            address: `0x${string}`;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: `0x${string}` | undefined;
                    investmentId?: string | undefined;
                }, {
                    data: {
                        stakerInfo: {
                            address: string;
                            name?: string | undefined;
                            iconUrl?: string | undefined;
                        };
                        accruedRewards: string;
                        stakedAmount: string;
                        totalApy?: string | undefined;
                        apy?: string | undefined;
                        pendingWithdrawal?: {
                            amount: string;
                            withdrawableAfter: number;
                        } | undefined;
                    };
                    id: string;
                    totalBalances: Record<string, string>;
                    tokenAddress?: string | undefined;
                    investmentId?: string | undefined;
                }>]>, "many">;
            } & E, z.ZodTypeAny, "passthrough">>;
        }, "many">;
    }, "strip", z.ZodTypeAny, {
        dappId: string;
        products: z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">[];
    }, {
        dappId: string;
        products: z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    dapps: {
        dappId: string;
        products: z.objectOutputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">[];
    }[];
}, {
    dapps: {
        dappId: string;
        products: z.objectInputType<{
            productId: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            manageUrl: z.ZodOptional<z.ZodString>;
            type: z.ZodUnion<[z.ZodLiteral<"concentratedLiquidityPosition">, z.ZodLiteral<"collateralizedDebtPosition">, z.ZodLiteral<"delegatedTokens">, z.ZodLiteral<"strkDelegatedStaking">, z.ZodLiteral<"staking">]>;
            groups: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                name: z.ZodOptional<z.ZodString>;
                healthRatio: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }, {
                name?: string | undefined;
                healthRatio?: string | undefined;
            }>>>;
            positions: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                tokenId: z.ZodString;
                data: z.ZodObject<{
                    poolFeePercentage: z.ZodString;
                    tickSpacingPercentage: z.ZodOptional<z.ZodString>;
                    token0: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                    token1: z.ZodObject<{
                        tokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
                        principal: z.ZodString;
                        accruedFees: z.ZodString;
                        minPrice: z.ZodString;
                        maxPrice: z.ZodString;
                        currentPrice: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }, {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }, {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: `0x${string}`;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    poolFeePercentage: string;
                    token0: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    token1: {
                        tokenAddress: string;
                        principal: string;
                        accruedFees: string;
                        minPrice: string;
                        maxPrice: string;
                        currentPrice: string;
                    };
                    tickSpacingPercentage?: string | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenId: string;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                    group: z.ZodOptional<z.ZodNumber>;
                    collateral: z.ZodBoolean;
                    debt: z.ZodBoolean;
                    lending: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }, {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    lending: boolean;
                    collateral: boolean;
                    debt: boolean;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    group?: number | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                id: z.ZodString;
                data: z.ZodObject<{
                    delegatingTo: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                }, "strip", z.ZodTypeAny, {
                    delegatingTo: `0x${string}`;
                }, {
                    delegatingTo: string;
                }>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    delegatingTo: `0x${string}`;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    delegatingTo: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                data: z.ZodObject<{
                    apy: z.ZodString;
                    totalApy: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    totalApy: string;
                    apy: string;
                }, {
                    totalApy: string;
                    apy: string;
                }>;
                investmentId: z.ZodOptional<z.ZodString>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    totalApy: string;
                    apy: string;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, z.ZodObject<z.objectUtil.extendShape<{
                id: z.ZodString;
                investmentId: z.ZodOptional<z.ZodString>;
                tokenAddress: z.ZodOptional<z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>>;
                totalBalances: z.ZodRecord<z.ZodString, z.ZodString>;
            }, {
                investmentId: z.ZodOptional<z.ZodString>;
                data: z.ZodObject<{
                    stakerInfo: z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        iconUrl: z.ZodOptional<z.ZodString>;
                        address: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
                    }, "strip", z.ZodTypeAny, {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }, {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    }>;
                    accruedRewards: z.ZodString;
                    stakedAmount: z.ZodString;
                    pendingWithdrawal: z.ZodOptional<z.ZodObject<{
                        amount: z.ZodString;
                        withdrawableAfter: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        amount: string;
                        withdrawableAfter: number;
                    }, {
                        amount: string;
                        withdrawableAfter: number;
                    }>>;
                    apy: z.ZodOptional<z.ZodString>;
                    totalApy: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }, {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                data: {
                    stakerInfo: {
                        address: `0x${string}`;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: `0x${string}` | undefined;
                investmentId?: string | undefined;
            }, {
                data: {
                    stakerInfo: {
                        address: string;
                        name?: string | undefined;
                        iconUrl?: string | undefined;
                    };
                    accruedRewards: string;
                    stakedAmount: string;
                    totalApy?: string | undefined;
                    apy?: string | undefined;
                    pendingWithdrawal?: {
                        amount: string;
                        withdrawableAfter: number;
                    } | undefined;
                };
                id: string;
                totalBalances: Record<string, string>;
                tokenAddress?: string | undefined;
                investmentId?: string | undefined;
            }>]>, "many">;
        }, z.ZodTypeAny, "passthrough">[];
    }[];
}>;
export type ApiDefiDecompositionProduct = z.infer<typeof apiDefiDecompositionProduct>;
export type ApiDefiDecompositionProducts = z.infer<typeof apiDefiDecompositionProducts>;
export type ApiDefiDecomposition = z.infer<typeof apiDefiDecompositionSchema>;
export type ApiDefiPositions = z.infer<typeof apiDefiPositionsSchema>;
export declare const apiAirdropSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    tokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    amount: z.ZodOptional<z.ZodString>;
    claimUrl: z.ZodOptional<z.ZodString>;
    claimStart: z.ZodNumber;
    claimEnd: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    tokenAddress: `0x${string}`;
    claimStart: number;
    name?: string | undefined;
    amount?: string | undefined;
    claimUrl?: string | undefined;
    claimEnd?: number | undefined;
}, {
    tokenAddress: string;
    claimStart: number;
    name?: string | undefined;
    amount?: string | undefined;
    claimUrl?: string | undefined;
    claimEnd?: number | undefined;
}>;
export declare const apiUnclaimedRewardsSchema: z.ZodObject<{
    accountAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    chain: z.ZodString;
    airdrops: z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        tokenAddress: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
        amount: z.ZodOptional<z.ZodString>;
        claimUrl: z.ZodOptional<z.ZodString>;
        claimStart: z.ZodNumber;
        claimEnd: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        tokenAddress: `0x${string}`;
        claimStart: number;
        name?: string | undefined;
        amount?: string | undefined;
        claimUrl?: string | undefined;
        claimEnd?: number | undefined;
    }, {
        tokenAddress: string;
        claimStart: number;
        name?: string | undefined;
        amount?: string | undefined;
        claimUrl?: string | undefined;
        claimEnd?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    chain: string;
    accountAddress: `0x${string}`;
    airdrops: {
        tokenAddress: `0x${string}`;
        claimStart: number;
        name?: string | undefined;
        amount?: string | undefined;
        claimUrl?: string | undefined;
        claimEnd?: number | undefined;
    }[];
}, {
    chain: string;
    accountAddress: string;
    airdrops: {
        tokenAddress: string;
        claimStart: number;
        name?: string | undefined;
        amount?: string | undefined;
        claimUrl?: string | undefined;
        claimEnd?: number | undefined;
    }[];
}>;
export type ApiAirdrop = z.infer<typeof apiAirdropSchema>;
export type ApiUnclaimedRewards = z.infer<typeof apiUnclaimedRewardsSchema>;
export type ApiCollateralizedDebtPosition = z.infer<typeof apiCollateralizedDebtPositionSchema>;
export type ApiConcentratedLiquidityPosition = z.infer<typeof apiConcentratedLiquidityPositionSchema>;
export type ApiStrkDelegatedStaking = z.infer<typeof apiStrkDelegatedStakingSchema>;
export type ApiStaking = z.infer<typeof apiStakingPositionSchema>;
export type ApiDelegatedTokens = z.infer<typeof apiDelegatedTokensSchema>;
export type ApiDelegatedTokensArray = z.infer<typeof apiDelegatedTokensArraySchema>;
export type ApiStrkDelegatedStakingPosition = z.infer<typeof apiStrkDelegatedStakingPositionsSchema>;
export type ApiStrkLiquidStakingPosition = z.infer<typeof apiStakingPositionsSchema>;
