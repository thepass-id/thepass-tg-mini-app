import { z as e } from "zod";
import { addressSchema as r } from "../../../chains/starknet/address.js";
import { apiPriceDetailsSchema as a, apiTokenInfoSchema as t } from "./backend.model.js";
const n = e.object({
  address: r,
  networkId: e.string({ required_error: "Network is required" })
}, { required_error: "Token is required" }), p = n.required().extend({
  balance: e.string()
}), o = n.required().extend({
  id: e.number().optional(),
  name: e.string().optional(),
  symbol: e.string().optional(),
  decimals: e.coerce.number().optional(),
  iconUrl: e.string().url("").optional().or(e.literal("")),
  // fallback since some iconUrls are empty, causing validation to fail
  pricingId: e.number().optional(),
  category: e.string().optional(),
  dappId: e.string().optional(),
  brandColor: e.string().optional()
}), i = o.extend({
  balance: e.string()
}), c = o.extend({
  currencyValue: e.string(),
  currencySymbol: e.string().optional(),
  ccyDayChange: e.string().optional(),
  ethDayChange: e.string().optional(),
  unitCurrencyValue: e.string().optional()
}), s = c.extend({
  ...i.shape
}), h = e.array(s), b = n.extend({
  ...a.shape
}), g = n.extend({
  ...t.shape
});
export {
  n as webBaseTokenSchema,
  p as webBaseTokenWithBalanceSchema,
  g as webTokenInfoDetailsSchema,
  b as webTokenPriceDetailsSchema,
  o as webTokenSchema,
  s as webTokenWithBalanceAndPriceSchema,
  i as webTokenWithBalanceSchema,
  c as webTokenWithPriceSchema,
  h as webTokensWithBalanceAndPriceSchema
};
