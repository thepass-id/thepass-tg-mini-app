import { isEmpty as p } from "lodash-es";
import { stark as i, CairoCustomEnum as g, CallData as l } from "starknet";
import { getArgentAccountWithMultiSignerClassHashes as S } from "../chains/starknet/services/deploymentData/getAccountClassHash.js";
import { isEqualAddress as d } from "../chains/starknet/address.js";
const y = async ({ ownerPubKey: r, ownerSignature: t, guardianPubKey: n, guardianSignature: e, classHash: c }) => {
  const o = p(e);
  if (f(c)) {
    const a = s(r, t);
    if (o)
      return u(a);
    const m = s(n, e);
    return u(a, m);
  }
  return o ? [t].flatMap(i.signatureToDecimalArray) : [t, e].flatMap(i.signatureToDecimalArray);
}, s = (r, t) => {
  const n = i.formatSignature(t);
  return new g({
    Starknet: { signer: r, r: n[0], s: n[1] },
    Secp256k1: void 0,
    Secp256r1: void 0,
    Eip191: void 0,
    Webauthn: void 0
  });
}, u = (...r) => {
  const t = r.length.toString(), n = l.compile(r);
  return [t, ...n];
}, f = (r) => S().some((t) => d(t, r));
export {
  y as mergeOwnerGuardianSignatures
};
