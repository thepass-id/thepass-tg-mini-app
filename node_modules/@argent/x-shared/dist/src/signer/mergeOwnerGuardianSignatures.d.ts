import { Signature } from 'starknet';
interface MergeOwnerGuardianSignaturesParams {
    ownerPubKey: string;
    ownerSignature: Signature;
    guardianPubKey: string;
    guardianSignature: Signature;
    classHash: string | undefined;
}
/**
 * Merges the owner and guardian signatures into a single signature.
 *
 * @param {Object} params - The parameters for merging signatures.
 * @param {string} params.ownerPubKey - The public key of the owner.
 * @param {Signature} params.ownerSignature - The signature of the owner.
 * @param {string} params.guardianPubKey - The public key of the guardian.
 * @param {Signature} params.guardianSignature - The signature of the guardian.
 * @param {string} params.classHash - The class hash of the account.
 * @returns {Promise<Signature>} - A promise that resolves to the merged signature.
 *
 * @remarks
 * - If the guardian signature is empty, it indicates that a co-signer is not required.
 * - If multi-signer support is enabled, the signatures are formatted and prepended with their lengths.
 * - If multi-signer support is not enabled, the signatures are converted to decimal arrays.
 */
declare const mergeOwnerGuardianSignatures: ({ ownerPubKey, ownerSignature, guardianPubKey, guardianSignature, classHash, }: MergeOwnerGuardianSignaturesParams) => Promise<Signature>;
export { mergeOwnerGuardianSignatures };
