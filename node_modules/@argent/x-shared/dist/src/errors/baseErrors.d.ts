import { JsonArray, JsonObject } from 'type-fest';
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray;
export interface BaseErrorPayload<T> {
    message?: string;
    options?: {
        error?: unknown;
        context?: JsonValue;
    };
    code?: T;
}
export declare class BaseError<T extends string | number> extends Error {
    private errorMessages?;
    readonly context?: JsonValue;
    readonly code?: T;
    constructor({ code, message, options }: BaseErrorPayload<T>, errorMessages?: { [key in T]: string; } | undefined);
    private setMessageByCode;
    toString(): string;
}
