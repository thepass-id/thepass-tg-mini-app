import { z } from 'zod';
import { IHttpService } from '../../http';
import { ArgentName } from './argentName';
export declare const apiWalletResponseSchema: z.ZodUnion<[z.ZodObject<{
    walletAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    ens: z.ZodString;
    chain: z.ZodEnum<["ethereum", "starknet"]>;
    deleted: z.ZodBoolean;
    walletDeployed: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    chain: "ethereum" | "starknet";
    walletAddress: `0x${string}`;
    ens: string;
    deleted: boolean;
    walletDeployed: boolean;
}, {
    chain: "ethereum" | "starknet";
    walletAddress: string;
    ens: string;
    deleted: boolean;
    walletDeployed: boolean;
}>, z.ZodObject<{
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: string;
}, {
    status: string;
}>]>;
export type ApiWalletResponse = z.infer<typeof apiWalletResponseSchema>;
type MinimalHttpService = Pick<IHttpService, "get">;
export declare function getAddressFromArgentName(argentName: ArgentName, httpService: MinimalHttpService, baseUrl: string, chain?: "ethereum" | "starknet"): Promise<`0x${string}`>;
export {};
