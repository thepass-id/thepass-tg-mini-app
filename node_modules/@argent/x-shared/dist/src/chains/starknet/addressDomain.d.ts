import { z } from 'zod';
export declare const starknetDomainNameSchema: z.ZodUnion<[z.ZodString, z.ZodString]>;
export type StarknetDomainName = z.infer<typeof starknetDomainNameSchema>;
export declare const addressOrDomainSchema: z.ZodUnion<[z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>, z.ZodUnion<[z.ZodString, z.ZodString]>]>;
export type AddressOrDomain = z.infer<typeof addressOrDomainSchema>;
export declare const addressOrDomainInputSchema: z.ZodUnion<[z.ZodPipeline<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, z.ZodEffects<z.ZodString, string, string>>, z.ZodUnion<[z.ZodString, z.ZodString]>]>;
export type AddressOrDomainInput = z.infer<typeof addressOrDomainInputSchema>;
export declare const isStarknetDomainName: (addressOrDomain?: AddressOrDomain) => addressOrDomain is StarknetDomainName;
export declare const isEqualStarknetDomainName: (a: StarknetDomainName, b?: StarknetDomainName) => boolean;
export declare const normalizeAddressOrDomain: (addressOrDomain: AddressOrDomain) => string;
