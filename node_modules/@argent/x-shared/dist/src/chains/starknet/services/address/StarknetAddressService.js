import { AddressError as s } from "../../../../errors/address.js";
import { isAddress as o, normalizeAddress as i } from "../../address.js";
import { isStarknetId as m } from "../../starknetId.js";
import { getAddressFromStarkName as a } from "../../getAddressFromStarkName.js";
import { isArgentName as d } from "../../argentName.js";
import { getAddressFromArgentName as n } from "../../getAddressFromArgentName.js";
class p {
  constructor(e, r, t) {
    this.httpService = e, this.baseUrl = r, this.allowedArgentNameNetworkId = t;
  }
  async parseAddressOrDomain(e, r, t) {
    if (o(e))
      return i(e);
    try {
      return await this.getAddressFromDomainName(e, r, t);
    } catch {
      throw new s({ code: "NOT_VALID" });
    }
  }
  async getAddressFromDomainName(e, r, t) {
    if (m(e))
      return a(e, r, t);
    if (d(e)) {
      if (r !== this.allowedArgentNameNetworkId)
        throw new s({
          code: "ARGENT_NAME_INVALID_NETWORK",
          message: `Argent name is only enabled on "${this.allowedArgentNameNetworkId}"`
        });
      return n(e, this.httpService, this.baseUrl);
    }
    throw new s({
      code: "NO_ADDRESS_FROM_DOMAIN"
    });
  }
}
export {
  p as StarknetAddressService
};
