import { CairoOption } from 'starknet';
import { Hex } from '../../../../utils';
import { Implementation } from './deploymentData.schema';
export declare const isEqualImplementation: (a: Implementation, b: Implementation) => boolean;
export type WalletAccount = {
    address: string;
    classHash?: Hex;
    cairoVersion?: string;
    type: "standard" | "plugin" | "multisig" | "betterMulticall" | "argent5MinuteEscapeTestingAccount" | "standardCairo0" | "smart" | "imported";
    guardian?: string;
    salt?: Hex;
};
export declare function findImplementationForAccount(owner: string, account: WalletAccount, additionalImplementations?: Implementation[]): Implementation;
export declare function getAccountDeploymentPayload(cairoVersion: string, accountClassHash: string, owner: string, guardian?: string, salt?: string, 
/** @deprecated This is only used for backwards compatibility with the old proxy contract, should not be used */
c0ProxyClassHash?: string): {
    classHash: string;
    constructorCalldata: import('starknet').Calldata;
    addressSalt: string;
};
export declare function buildConstructorCalldata(cairoVersion: string, accountClassHash: string, owner: string, guardian?: string): {
    calldata: string[];
    implementation: string;
    selector: `0x${string}`;
} | {
    owner: string;
    guardian: string;
} | {
    ownerSigner: import('starknet').CairoCustomEnum;
    guardianAsOption: CairoOption<import('starknet').CairoCustomEnum> | CairoOption<null>;
};
export declare function getAccountContractAddress(cairoVersion: string, accountClassHash: string, signer: string, guardian?: string, salt?: string): string;
