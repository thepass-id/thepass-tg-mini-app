"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const q=require("../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniqWith.cjs"),r=require("starknet"),H=require("zod"),u=require("../../../../signer/multisigner.cjs"),f=require("../../../../errors/account.cjs"),m=require("../../address.cjs"),y=require("../../constants.cjs"),D=require("./constants.cjs"),p=require("./deploymentData.schema.cjs"),d=require("./getAccountClassHash.cjs"),C=(e,t)=>e.cairoVersion===t.cairoVersion&&m.isEqualAddress(e.accountClassHash,t.accountClassHash);function E(e,t,n=[]){if(t.type==="imported")throw new Error("Cannot find implementation for imported account");const a=p.implementationSchema.parse({cairoVersion:t.cairoVersion??"1",accountClassHash:t.classHash??d.getLatestArgentAccountClassHash()}),i=H.z.array(p.implementationSchema).parse(n),s=[...d.getArgentAccountClassHashes("cairo0").map(o=>({cairoVersion:"0",accountClassHash:o})),...d.getArgentAccountClassHashes("cairo1").map(o=>({cairoVersion:"1",accountClassHash:o}))],l=q.default([a,...i,...s],C).map(o=>({implementation:o,address:h(o.cairoVersion,o.accountClassHash,e,t.guardian,t.salt)})).find(o=>m.isEqualAddress(o.address,t.address));if(!l)throw new f.AccountError({code:"CALCULATED_ADDRESS_NO_MATCH"});return l.implementation}function S(e,t,n,a,i,s=D.C0_PROXY_CONTRACT_CLASS_HASHES[0]){const A=g(e,t,n,a);return{classHash:e==="0"?s:t,constructorCalldata:r.CallData.compile(A),addressSalt:i||n}}function g(e,t,n,a){const i=e!=="0"&&m.isEqualAddress(y.STANDARD_DEVNET_ACCOUNT_CLASS_HASH,t),s={pubkey:n,...i?{}:{guardian:a||"0"}};if(d.getArgentAccountWithMultiSignerClassHashes().some(c=>m.isEqualAddress(c,t))){const c=u.getSignerForMultiSigner(n,u.MultiSigner.Starknet),l=a?new r.CairoOption(r.CairoOptionVariant.Some,u.getSignerForMultiSigner(a,u.MultiSigner.Starknet)):new r.CairoOption(r.CairoOptionVariant.None,null);return{ownerSigner:c,guardianAsOption:l}}return e==="0"?p.constructorCallDataSchemaC0.parse({implementation:t,selector:r.hash.getSelectorFromName("initialize"),calldata:r.CallData.compile(s)}):p.constructorCallDataSchemaC1V1.parse({owner:n,guardian:a})}function h(e,t,n,a,i){const s=S(e,t,n,a,i);return r.hash.calculateContractAddressFromHash(s.addressSalt,s.classHash,s.constructorCalldata,0)}exports.buildConstructorCalldata=g;exports.findImplementationForAccount=E;exports.getAccountContractAddress=h;exports.getAccountDeploymentPayload=S;exports.isEqualImplementation=C;
