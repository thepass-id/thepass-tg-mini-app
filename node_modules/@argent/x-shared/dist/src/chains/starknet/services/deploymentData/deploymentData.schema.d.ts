import { z } from 'zod';
export declare const implementationSchema: z.ZodObject<{
    cairoVersion: z.ZodUnion<[z.ZodLiteral<"0">, z.ZodLiteral<"1">]>;
    accountClassHash: z.ZodEffects<z.ZodString, `0x${string}`, string>;
}, "strip", z.ZodTypeAny, {
    cairoVersion: "0" | "1";
    accountClassHash: `0x${string}`;
}, {
    cairoVersion: "0" | "1";
    accountClassHash: string;
}>;
export type Implementation = z.infer<typeof implementationSchema>;
export declare const constructorCallDataSchemaC0: z.ZodObject<{
    implementation: z.ZodString;
    selector: z.ZodEffects<z.ZodString, `0x${string}`, string>;
    calldata: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    calldata: string[];
    implementation: string;
    selector: `0x${string}`;
}, {
    calldata: string[];
    implementation: string;
    selector: string;
}>;
export type ConstructorCallDataC0 = z.infer<typeof constructorCallDataSchemaC0>;
export declare const constructorCallDataSchemaC1V1: z.ZodObject<{
    owner: z.ZodString;
    guardian: z.ZodEffects<z.ZodOptional<z.ZodString>, string, string | undefined>;
}, "strip", z.ZodTypeAny, {
    owner: string;
    guardian: string;
}, {
    owner: string;
    guardian?: string | undefined;
}>;
export type ConstructorCallDataC1V1 = z.infer<typeof constructorCallDataSchemaC1V1>;
