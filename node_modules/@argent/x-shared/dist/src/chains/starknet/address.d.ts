import { z } from 'zod';
import { Hex } from '../../utils/hex';
export type TxHash = Hex;
export type Address = Hex;
export declare const validChecksumAddressSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const validateAddressRangeSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const addressSchemaBase: z.ZodString;
export declare const addressSchemaLooseLength: z.ZodString;
export declare const addressSchemaStrictLength: z.ZodString;
export declare const addressSchema: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
export declare const addressOrEmptyUndefinedSchema: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>, z.ZodLiteral<"">]>, `0x${string}` | undefined, string>>;
export declare const addressSchemaArgentBackend: z.ZodEffects<z.ZodString, `0x${string}`, string>;
export declare const isAddress: (string?: string) => string is Address;
export declare const isValidAddress: (string?: string) => string is Address;
export declare const normalizeAddress: (address: string) => Address;
export declare const isBase58Address: (string?: string) => boolean;
export declare const formatTruncatedAddress: (address: string) => string;
export declare const formatFullAddress: (address: string) => string;
export declare const isEqualAddress: (a?: string, b?: string) => boolean;
export declare const isZeroAddress: (address: string) => boolean;
export declare const includesAddress: (needle: string, haystack?: string[]) => boolean;
export declare const formatTruncatedSignerKey: (signerKey: string) => string;
export declare const formatTruncatedString: (string: string, targetLength: number) => string;
