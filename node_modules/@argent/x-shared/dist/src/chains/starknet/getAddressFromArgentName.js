import m from "url-join";
import { z as s } from "zod";
import { AddressError as t } from "../../errors/address.js";
import { argentNameSchema as A } from "./argentName.js";
import { addressSchemaArgentBackend as w, isZeroAddress as f, isValidAddress as N, normalizeAddress as h } from "./address.js";
import { HttpError as _ } from "../../http/HttpError.js";
const O = s.object({
  walletAddress: w,
  ens: A,
  chain: s.enum(["ethereum", "starknet"]),
  deleted: s.boolean(),
  walletDeployed: s.boolean()
}).or(s.object({
  status: s.string()
}));
async function T(o, n, a, d = "starknet") {
  const i = {
    ens: o,
    chain: d
  }, c = new URLSearchParams(i), l = m(a, "wallet", `?${c}`);
  try {
    const e = await n.get(l), r = e && "walletAddress" in e ? e.walletAddress : void 0;
    if (!r)
      throw new t({
        code: "NO_ADDRESS_FROM_ARGENT_NAME"
      });
    if (f(r))
      throw new t({
        code: "ARGENT_NAME_NOT_FOUND",
        message: `${o} not found`
      });
    if (!N(r))
      throw new t({
        code: "ARGENT_NAME_INVALID_ADDRESS",
        message: `${o} resolved to an invalid address (${r})`
      });
    return h(r);
  } catch (e) {
    throw e instanceof _ && e.status === 404 ? new t({
      code: "ARGENT_NAME_NOT_FOUND",
      message: `${o} not found`
    }) : e;
  }
}
export {
  O as apiWalletResponseSchema,
  T as getAddressFromArgentName
};
