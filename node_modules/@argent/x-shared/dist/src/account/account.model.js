import { z as n } from "zod";
const t = n.object({
  name: n.string().optional(),
  address: n.string(),
  ownerAddress: n.string(),
  chain: n.enum(["ethereum", "zksync", "zksync2", "starknet"]),
  deploymentStatus: n.enum([
    "notDeployed",
    "deploying",
    "deployed",
    "deployError"
  ]),
  application: n.enum(["mobile", "webwallet", "argentx"]),
  guardianAddresses: n.array(n.string()).optional(),
  enabledGuardianAddresses: n.array(n.string()).optional(),
  implClassHash: n.string().optional(),
  proxyClassHash: n.string().optional(),
  salt: n.string().optional(),
  created: n.string().optional(),
  contractVersion: n.string().optional(),
  contractName: n.string().optional(),
  version: n.number().optional(),
  owner: n.object({
    guid: n.string().optional(),
    signerType: n.enum(["StarknetKey", "EthereumKey"]).optional()
  }).optional(),
  colour: n.string().optional(),
  icon: n.string().optional(),
  network: n.string().optional()
}), r = n.object({
  address: n.string(),
  guardianAddress: n.string().optional(),
  account: t
}), e = n.object({
  ownerAddress: n.string(),
  signature: n.object({
    r: n.string(),
    s: n.string()
  }),
  implClassHash: n.string().optional(),
  name: n.string().optional(),
  icon: n.string().optional(),
  network: n.string().optional()
});
export {
  r as AddSmartAccountResponseSchema,
  e as AddSmartAcountRequestSchema,
  t as BackendAccountSchema
};
