function n(r, t, f, i) {
  if (typeof r == "object" && r !== null)
    for (const e in r)
      typeof r[e] == "object" && r[e] !== null ? n(r[e], t, f, i) : (!i || i.includes(e)) && r[e] === t && (r[e] = f);
  else Array.isArray(r) && r.forEach((e, l) => {
    typeof e == "object" && e !== null ? n(e, t, f, i) : e === t && (r[l] = f);
  });
}
function c(r, t) {
  if (typeof r == "object" && r !== null) {
    for (const f in r)
      if (typeof r[f] == "object" && r[f] !== null) {
        if (c(r[f], t))
          return !0;
      } else if (r[f] === t)
        return !0;
  } else if (Array.isArray(r)) {
    for (const f of r)
      if (typeof f == "object" && f !== null) {
        if (c(f, t))
          return !0;
      } else if (f === t)
        return !0;
  }
  return !1;
}
export {
  c as containsValue,
  n as replaceValueRecursively
};
