import { isEqual as d } from "lodash-es";
function a(t) {
  return {
    compareFn: d,
    mergeFn: (i, e) => e,
    ...t
  };
}
function g(t, i = {}) {
  const { compareFn: e, mergeFn: u } = a(i);
  return t.reduce((r, n) => r.some((o) => e(o, n)) ? r.map((o) => e(o, n) ? u(o, n) : o) : [...r, n], []);
}
function h(t, i, e = {}) {
  const { compareFn: u, mergeFn: r } = a(e), n = e.insertMode ?? "push", o = g(t, e);
  return i.reduce((s, c) => {
    const f = s.findIndex((p) => u(p, c));
    return f === -1 ? n === "unshift" ? [c, ...s] : [...s, c] : [
      ...s.slice(0, f),
      r(s[f], c),
      ...s.slice(f + 1)
    ];
  }, o);
}
function F(t) {
  const i = (r) => r;
  return {
    defaults: [],
    serialize: i,
    deserialize: i,
    compare: (r, n) => r === n,
    merge: (r, n) => n,
    ...t
  };
}
export {
  h as mergeArrayStableWith,
  F as optionsWithDefaults
};
