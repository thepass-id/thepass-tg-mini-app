import { num as i } from "starknet";
import { id as d } from "./id.js";
import { getInitials as g } from "./initials.js";
const { toBigInt: f } = i, a = (t) => {
  const r = t.replace("#", "");
  if (!/^[0-9A-F]{6}$/i.test(r))
    throw new Error(`Invalid color ${t}`);
  return `#${r}`;
}, m = (t, r) => {
  const e = a(r.background), o = a(r.color ?? "#ffffff"), n = g(t, !0), s = `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">
    <rect width="48" height="48" fill="${e}" />
    <text x="50%" y="54%" dominant-baseline="middle" text-anchor="middle" font-size="16" font-family="Barlow, Helvetica, Arial, sans-serif" fill="${o}">${n}</text>
  </svg>`;
  return `data:image/svg+xml;base64,${btoa(s)}`;
}, c = [
  "02BBA8",
  "29C5FF",
  "0078A4",
  "FFBF3D",
  "FFA85C",
  "FF875B",
  "FF675C",
  "FF5C72"
], h = (t) => {
  const r = d(t).slice(-2), e = parseInt(r, 16) % c.length;
  return c[e];
}, u = (t) => {
  try {
    return i.toHex(f(i.hexToDecimalString(t)));
  } catch {
  }
  return "";
}, A = ({ accountName: t, networkId: r, accountAddress: e, backgroundColor: o }) => {
  const n = u(e), s = `${r}::${n}`, l = o || h(s);
  return m(t, { background: l });
};
export {
  m as generateAvatarImage,
  h as getColor,
  A as getNetworkAccountImageUrl,
  u as stripAddressZeroPadding
};
