import { default as retry } from 'async-retry';
import { z } from 'zod';
type InitialisationStatus = {
    status: "initialising";
} | {
    status: "initialised";
};
/**
 * Retries an async function until the "initialised" status is achieved or the maximum number of retries is reached.
 * @param fn The async function to retry
 * @param validationSchema A Zod schema to validate the response from the async function
 * @param opts Retry options
 * @returns The result of the successful function call, or null if the maximum number of retries is reached or an error occurs
 */
export declare function retryUntilInitialised<T extends InitialisationStatus>(fn: () => Promise<T>, validationSchema: z.ZodType, opts?: retry.Options): Promise<T | null>;
export {};
