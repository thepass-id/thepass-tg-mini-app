import { BigNumber as m } from "../../../node_modules/.pnpm/bignumber.js@9.1.2/node_modules/bignumber.js/bignumber.js";
import { isNumeric as C } from "./isNumeric.js";
const s = {
  CURRENCY: {
    minDecimalPlaces: 2,
    maxDecimalPlaces: 10,
    minDecimalSignificantDigits: 2,
    decimalPlacesWhenZero: 2,
    allowLeadingZerosInDecimalPart: !0
  },
  TOKEN: {
    minDecimalPlaces: 4,
    maxDecimalPlaces: 16,
    minDecimalSignificantDigits: 2,
    decimalPlacesWhenZero: 1,
    allowLeadingZerosInDecimalPart: !0
  }
}, y = (t, e) => D(t, {
  ...s.CURRENCY,
  ...e || {}
}), O = (t, e) => D(t, {
  ...s.TOKEN,
  ...e || {}
}), D = (t, { minDecimalPlaces: e, maxDecimalPlaces: p, minDecimalSignificantDigits: u, decimalPlacesWhenZero: c, allowLeadingZerosInDecimalPart: l } = s.CURRENCY) => {
  if (!C(t))
    return null;
  const i = new m(typeof t == "bigint" ? t.toString() : t);
  let r;
  const N = `0.${"".padStart(c - 1, "0")}1`;
  if (i.lt(new m(N)) && !l)
    r = `0.${"".padStart(c, "0")}`;
  else if (i.gte(1))
    r = e !== 0 ? i.toFormat(e) : i.toFormat(e, m.ROUND_FLOOR);
  else {
    const o = i.toFormat(p).split(".")[1].match(/^0+/), P = l && o && o.length ? o[0].length : 0, h = Math.max(P + u, e);
    r = i.toFormat(h);
  }
  const [d, g] = r.split(".");
  let n = d;
  if (g) {
    const a = g.replace(/0+$/, "");
    n += a ? `.${a}` : "";
  }
  const f = 1 + r.indexOf(".") + c;
  return n.length < f && (n = r.substring(0, f)), n;
};
export {
  y as prettifyCurrencyNumber,
  D as prettifyNumber,
  s as prettifyNumberConfig,
  O as prettifyTokenNumber
};
