import { z } from 'zod';
export declare const booleanToStringSchema: z.ZodEffects<z.ZodBoolean, string, boolean>;
export declare const stringToBooleanSchema: z.ZodEffects<z.ZodString, boolean, string>;
export declare function createSchemaWithWarnings<T extends z.ZodRawShape>(shape: T): z.ZodEffects<z.ZodObject<T, "passthrough", z.ZodTypeAny, z.objectOutputType<T, z.ZodTypeAny, "passthrough">, z.objectInputType<T, z.ZodTypeAny, "passthrough">>, z.objectOutputType<T, z.ZodTypeAny, "passthrough">, z.objectInputType<T, z.ZodTypeAny, "passthrough">> & {
    extend: <E extends z.ZodRawShape>(extension: E) => z.ZodEffects<z.ZodObject<T & E, "passthrough", z.ZodTypeAny, z.objectOutputType<T & E, z.ZodTypeAny, "passthrough">, z.objectInputType<T & E, z.ZodTypeAny, "passthrough">>, z.objectOutputType<T & E, z.ZodTypeAny, "passthrough">, z.objectInputType<T & E, z.ZodTypeAny, "passthrough">>;
};
type ISafeParseAndWarn<T extends z.ZodType> = {
    success: true;
    data: z.infer<T>;
} | {
    success: false;
    error: z.ZodError;
};
export declare const safeParseAndWarn: <T extends z.ZodType>(schema: T, data: unknown) => ISafeParseAndWarn<T>;
export {};
