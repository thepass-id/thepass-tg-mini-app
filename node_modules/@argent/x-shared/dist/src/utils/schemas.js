import { z as t } from "zod";
const i = t.boolean().transform((e) => String(e)), u = t.string().transform((e) => e === "true");
function s(e) {
  return t.object(e).passthrough().superRefine((r) => {
    const n = Object.keys(e), o = Object.keys(r).filter((a) => !n.includes(a));
    o.length > 0 && `${o.join(", ")}`;
  });
}
function d(e) {
  const r = s(e);
  return Object.assign(r, {
    extend: (n) => s({ ...e, ...n })
  });
}
const f = (e, r) => {
  try {
    return { success: !0, data: e.parse(r) };
  } catch (n) {
    if (n instanceof t.ZodError)
      return console.error("Validation warnings:", n.errors), { success: !1, error: n };
    throw n;
  }
};
export {
  i as booleanToStringSchema,
  d as createSchemaWithWarnings,
  f as safeParseAndWarn,
  u as stringToBooleanSchema
};
