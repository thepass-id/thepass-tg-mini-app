import { Call, CallDetails, RawArgs, RawArgsArray, RawArgsObject } from 'starknet';
import { z } from 'zod';
export declare const bigNumberishSchema: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
export declare const uint256Schema: z.ZodObject<{
    low: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
    high: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
}, "strip", z.ZodTypeAny, {
    high: string | number | bigint;
    low: string | number | bigint;
}, {
    high: string | number | bigint;
    low: string | number | bigint;
}>;
export declare const calldataSchema: z.ZodIntersection<z.ZodArray<z.ZodString, "many">, z.ZodOptional<z.ZodObject<{
    __compiled__: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    __compiled__?: boolean | undefined;
}, {
    __compiled__?: boolean | undefined;
}>>>;
export declare const rawArgsArraySchema: z.ZodSchema<RawArgsArray>;
export declare const multiTypeSchema: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>, z.ZodObject<{
    low: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
    high: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
}, "strip", z.ZodTypeAny, {
    high: string | number | bigint;
    low: string | number | bigint;
}, {
    high: string | number | bigint;
    low: string | number | bigint;
}>, z.ZodAny, z.ZodBoolean]>;
export declare const rawArgsObjectSchema: z.ZodSchema<RawArgsObject>;
export declare const rawArgsSchema: z.ZodSchema<RawArgs>;
export declare const looseCalldataSchema: z.ZodOptional<z.ZodUnion<[z.ZodType<RawArgs, z.ZodTypeDef, RawArgs>, z.ZodIntersection<z.ZodArray<z.ZodString, "many">, z.ZodOptional<z.ZodObject<{
    __compiled__: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    __compiled__?: boolean | undefined;
}, {
    __compiled__?: boolean | undefined;
}>>>]>>;
export declare const callDetailsSchema: z.ZodSchema<CallDetails>;
export declare const callSchema: z.ZodSchema<Call>;
export declare const feltSchema: z.ZodEffects<z.ZodString, string, string>;
export declare const changeGuardianCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], null>;
export declare const escapeGuardianCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], null>;
export declare const addOwnersCalldataSchema: z.ZodObject<{
    new_threshold: z.ZodEffects<z.ZodString, string, string>;
    signers_to_add: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
}, "strip", z.ZodTypeAny, {
    new_threshold: string;
    signers_to_add: string[];
}, {
    new_threshold: string;
    signers_to_add: string[];
}>;
export declare const removeOwnersCalldataSchema: z.ZodObject<{
    new_threshold: z.ZodEffects<z.ZodString, string, string>;
    signers_to_remove: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
}, "strip", z.ZodTypeAny, {
    new_threshold: string;
    signers_to_remove: string[];
}, {
    new_threshold: string;
    signers_to_remove: string[];
}>;
export declare const replaceSignerCalldataSchema: z.ZodObject<{
    signer_to_remove: z.ZodEffects<z.ZodString, string, string>;
    signer_to_add: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    signer_to_remove: string;
    signer_to_add: string;
}, {
    signer_to_remove: string;
    signer_to_add: string;
}>;
export declare const changeThresholdCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], null>;
export declare const addPluginCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], null>;
export declare const removePluginCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], null>;
export declare const executeOnPluginCalldataSchema: z.ZodTuple<[z.ZodEffects<z.ZodString, string, string>], z.ZodEffects<z.ZodString, string, string>>;
export declare const transferCalldataSchema: z.ZodObject<{
    recipient: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    amount: z.ZodObject<{
        low: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
        high: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBigInt]>;
    }, "strip", z.ZodTypeAny, {
        high: string | number | bigint;
        low: string | number | bigint;
    }, {
        high: string | number | bigint;
        low: string | number | bigint;
    }>;
}, "strip", z.ZodTypeAny, {
    recipient: `0x${string}`;
    amount: {
        high: string | number | bigint;
        low: string | number | bigint;
    };
}, {
    recipient: string;
    amount: {
        high: string | number | bigint;
        low: string | number | bigint;
    };
}>;
