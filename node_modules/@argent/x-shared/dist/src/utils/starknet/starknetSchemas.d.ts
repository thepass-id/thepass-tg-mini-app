import { z } from 'zod';
import { FunctionAbiType } from './starknetLibTypes';
export declare const builtinsSchema: z.ZodArray<z.ZodString, "many">;
export declare const contractEntryPointFieldsSchema: z.ZodObject<{
    selector: z.ZodString;
    offset: z.ZodString;
    builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    selector: string;
    offset: string;
    builtins?: string[] | undefined;
}, {
    selector: string;
    offset: string;
    builtins?: string[] | undefined;
}>;
export declare const entryPointsByTypeSchema: z.ZodObject<{
    CONSTRUCTOR: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        offset: z.ZodString;
        builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }>, "many">;
    EXTERNAL: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        offset: z.ZodString;
        builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }>, "many">;
    L1_HANDLER: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        offset: z.ZodString;
        builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }, {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    CONSTRUCTOR: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
    EXTERNAL: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
    L1_HANDLER: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
}, {
    CONSTRUCTOR: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
    EXTERNAL: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
    L1_HANDLER: {
        selector: string;
        offset: string;
        builtins?: string[] | undefined;
    }[];
}>;
export declare const compressedProgramSchema: z.ZodString;
export declare const programSchema: z.ZodObject<{
    builtins: z.ZodArray<z.ZodString, "many">;
    data: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    data: string[];
    builtins: string[];
}, {
    data: string[];
    builtins: string[];
}>;
export declare const abiEntrySchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: string;
}, {
    name: string;
    type: string;
}>;
export declare const functionAbiTypeSchema: z.ZodNativeEnum<typeof FunctionAbiType>;
export declare const functionAbiSchema: z.ZodObject<{
    inputs: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, "many">;
    name: z.ZodString;
    outputs: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, "many">;
    stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
    state_mutability: z.ZodOptional<z.ZodString>;
    type: z.ZodNativeEnum<typeof FunctionAbiType>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: FunctionAbiType;
    inputs: {
        name: string;
        type: string;
    }[];
    outputs: {
        name: string;
        type: string;
    }[];
    stateMutability?: "view" | undefined;
    state_mutability?: string | undefined;
}, {
    name: string;
    type: FunctionAbiType;
    inputs: {
        name: string;
        type: string;
    }[];
    outputs: {
        name: string;
        type: string;
    }[];
    stateMutability?: "view" | undefined;
    state_mutability?: string | undefined;
}>;
export declare const eventEntrySchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: string;
    kind: "key" | "data";
}, {
    name: string;
    type: string;
    kind: "key" | "data";
}>;
export declare const legacyEventSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodLiteral<"event">;
    data: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    keys: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>;
export declare const cairo1EventSchema: z.ZodObject<{
    name: z.ZodString;
    members: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    kind: z.ZodLiteral<"struct">;
    type: z.ZodLiteral<"event">;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>;
export declare const structAbiSchema: z.ZodObject<{
    members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, z.ZodObject<{
        offset: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        offset: number;
    }, {
        offset: number;
    }>>, "many">;
    name: z.ZodString;
    size: z.ZodNumber;
    type: z.ZodLiteral<"struct">;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "struct";
    members: ({
        name: string;
        type: string;
    } & {
        offset: number;
    })[];
    size: number;
}, {
    name: string;
    type: "struct";
    members: ({
        name: string;
        type: string;
    } & {
        offset: number;
    })[];
    size: number;
}>;
export declare const eventAbiSchema: z.ZodUnion<[z.ZodObject<{
    name: z.ZodString;
    members: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    kind: z.ZodLiteral<"struct">;
    type: z.ZodLiteral<"event">;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>, z.ZodObject<{
    name: z.ZodString;
    type: z.ZodLiteral<"event">;
    data: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    keys: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>]>;
export declare const abiSchema: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    inputs: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, "many">;
    name: z.ZodString;
    outputs: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, "many">;
    stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
    state_mutability: z.ZodOptional<z.ZodString>;
    type: z.ZodNativeEnum<typeof FunctionAbiType>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: FunctionAbiType;
    inputs: {
        name: string;
        type: string;
    }[];
    outputs: {
        name: string;
        type: string;
    }[];
    stateMutability?: "view" | undefined;
    state_mutability?: string | undefined;
}, {
    name: string;
    type: FunctionAbiType;
    inputs: {
        name: string;
        type: string;
    }[];
    outputs: {
        name: string;
        type: string;
    }[];
    stateMutability?: "view" | undefined;
    state_mutability?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    name: z.ZodString;
    members: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    kind: z.ZodLiteral<"struct">;
    type: z.ZodLiteral<"event">;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    type: "event";
    kind: "struct";
    members: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>, z.ZodObject<{
    name: z.ZodString;
    type: z.ZodLiteral<"event">;
    data: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
    keys: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        kind: "key" | "data";
    }, {
        name: string;
        type: string;
        kind: "key" | "data";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}, {
    name: string;
    keys: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
    type: "event";
    data: {
        name: string;
        type: string;
        kind: "key" | "data";
    }[];
}>]>, z.ZodObject<{
    members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
    }, {
        name: string;
        type: string;
    }>, z.ZodObject<{
        offset: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        offset: number;
    }, {
        offset: number;
    }>>, "many">;
    name: z.ZodString;
    size: z.ZodNumber;
    type: z.ZodLiteral<"struct">;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "struct";
    members: ({
        name: string;
        type: string;
    } & {
        offset: number;
    })[];
    size: number;
}, {
    name: string;
    type: "struct";
    members: ({
        name: string;
        type: string;
    } & {
        offset: number;
    })[];
    size: number;
}>, z.ZodAny]>, "many">;
export declare const legacyContractClassSchema: z.ZodObject<{
    program: z.ZodObject<{
        builtins: z.ZodArray<z.ZodString, "many">;
        data: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        data: string[];
        builtins: string[];
    }, {
        data: string[];
        builtins: string[];
    }>;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }>;
    abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        inputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        name: z.ZodString;
        outputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
        state_mutability: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof FunctionAbiType>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        name: z.ZodString;
        members: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        kind: z.ZodLiteral<"struct">;
        type: z.ZodLiteral<"event">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"event">;
        data: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        keys: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>]>, z.ZodObject<{
        members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, z.ZodObject<{
            offset: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            offset: number;
        }, {
            offset: number;
        }>>, "many">;
        name: z.ZodString;
        size: z.ZodNumber;
        type: z.ZodLiteral<"struct">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }>, z.ZodAny]>, "many">;
}, "strip", z.ZodTypeAny, {
    program: {
        data: string[];
        builtins: string[];
    };
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    abi: any[];
}, {
    program: {
        data: string[];
        builtins: string[];
    };
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    abi: any[];
}>;
export declare const byteCodeSchema: z.ZodArray<z.ZodString, "many">;
export declare const sierraProgramDebugInfoSchema: z.ZodObject<{
    type_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
    libfunc_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
    user_func_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
}, "strip", z.ZodTypeAny, {
    type_names: [number, string][];
    libfunc_names: [number, string][];
    user_func_names: [number, string][];
}, {
    type_names: [number, string][];
    libfunc_names: [number, string][];
    user_func_names: [number, string][];
}>;
export declare const sierraContractEntryPointFieldsSchema: z.ZodObject<{
    selector: z.ZodString;
    function_idx: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    selector: string;
    function_idx: number;
}, {
    selector: string;
    function_idx: number;
}>;
export declare const sierraEntryPointsByTypeSchema: z.ZodObject<{
    CONSTRUCTOR: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        function_idx: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        function_idx: number;
    }, {
        selector: string;
        function_idx: number;
    }>, "many">;
    EXTERNAL: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        function_idx: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        function_idx: number;
    }, {
        selector: string;
        function_idx: number;
    }>, "many">;
    L1_HANDLER: z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        function_idx: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        function_idx: number;
    }, {
        selector: string;
        function_idx: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    CONSTRUCTOR: {
        selector: string;
        function_idx: number;
    }[];
    EXTERNAL: {
        selector: string;
        function_idx: number;
    }[];
    L1_HANDLER: {
        selector: string;
        function_idx: number;
    }[];
}, {
    CONSTRUCTOR: {
        selector: string;
        function_idx: number;
    }[];
    EXTERNAL: {
        selector: string;
        function_idx: number;
    }[];
    L1_HANDLER: {
        selector: string;
        function_idx: number;
    }[];
}>;
export declare const compiledSierraSchema: z.ZodObject<{
    sierra_program: z.ZodArray<z.ZodString, "many">;
    sierra_program_debug_info: z.ZodOptional<z.ZodObject<{
        type_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
        libfunc_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
        user_func_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
    }, "strip", z.ZodTypeAny, {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    }, {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    }>>;
    contract_class_version: z.ZodString;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    }>;
    abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        inputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        name: z.ZodString;
        outputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
        state_mutability: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof FunctionAbiType>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        name: z.ZodString;
        members: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        kind: z.ZodLiteral<"struct">;
        type: z.ZodLiteral<"event">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"event">;
        data: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        keys: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>]>, z.ZodObject<{
        members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, z.ZodObject<{
            offset: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            offset: number;
        }, {
            offset: number;
        }>>, "many">;
        name: z.ZodString;
        size: z.ZodNumber;
        type: z.ZodLiteral<"struct">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }>, z.ZodAny]>, "many">;
}, "strip", z.ZodTypeAny, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    };
    abi: any[];
    sierra_program: string[];
    contract_class_version: string;
    sierra_program_debug_info?: {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    } | undefined;
}, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    };
    abi: any[];
    sierra_program: string[];
    contract_class_version: string;
    sierra_program_debug_info?: {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    } | undefined;
}>;
export declare const pythonicHintsSchema: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodArray<z.ZodString, "many">], null>, "many">;
export declare const cairoAssemblySchema: z.ZodObject<{
    prime: z.ZodString;
    compiler_version: z.ZodString;
    bytecode: z.ZodArray<z.ZodString, "many">;
    hints: z.ZodArray<z.ZodAny, "many">;
    pythonic_hints: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodArray<z.ZodString, "many">], null>, "many">;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    prime: string;
    compiler_version: string;
    bytecode: string[];
    hints: any[];
    pythonic_hints: [number, string[]][];
}, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    prime: string;
    compiler_version: string;
    bytecode: string[];
    hints: any[];
    pythonic_hints: [number, string[]][];
}>;
export declare const compiledSierraCasmSchema: z.ZodObject<{
    prime: z.ZodString;
    compiler_version: z.ZodString;
    bytecode: z.ZodArray<z.ZodString, "many">;
    hints: z.ZodArray<z.ZodAny, "many">;
    pythonic_hints: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodArray<z.ZodString, "many">], null>, "many">;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    prime: string;
    compiler_version: string;
    bytecode: string[];
    hints: any[];
    pythonic_hints: [number, string[]][];
}, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    prime: string;
    compiler_version: string;
    bytecode: string[];
    hints: any[];
    pythonic_hints: [number, string[]][];
}>;
export declare const compiledContractClassSchema: z.ZodUnion<[z.ZodObject<{
    program: z.ZodObject<{
        builtins: z.ZodArray<z.ZodString, "many">;
        data: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        data: string[];
        builtins: string[];
    }, {
        data: string[];
        builtins: string[];
    }>;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            offset: z.ZodString;
            builtins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }, {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    }>;
    abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        inputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        name: z.ZodString;
        outputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
        state_mutability: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof FunctionAbiType>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        name: z.ZodString;
        members: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        kind: z.ZodLiteral<"struct">;
        type: z.ZodLiteral<"event">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"event">;
        data: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        keys: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>]>, z.ZodObject<{
        members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, z.ZodObject<{
            offset: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            offset: number;
        }, {
            offset: number;
        }>>, "many">;
        name: z.ZodString;
        size: z.ZodNumber;
        type: z.ZodLiteral<"struct">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }>, z.ZodAny]>, "many">;
}, "strip", z.ZodTypeAny, {
    program: {
        data: string[];
        builtins: string[];
    };
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    abi: any[];
}, {
    program: {
        data: string[];
        builtins: string[];
    };
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        EXTERNAL: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
        L1_HANDLER: {
            selector: string;
            offset: string;
            builtins?: string[] | undefined;
        }[];
    };
    abi: any[];
}>, z.ZodObject<{
    sierra_program: z.ZodArray<z.ZodString, "many">;
    sierra_program_debug_info: z.ZodOptional<z.ZodObject<{
        type_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
        libfunc_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
        user_func_names: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodString], null>, "many">;
    }, "strip", z.ZodTypeAny, {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    }, {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    }>>;
    contract_class_version: z.ZodString;
    entry_points_by_type: z.ZodObject<{
        CONSTRUCTOR: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
        EXTERNAL: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
        L1_HANDLER: z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            function_idx: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            function_idx: number;
        }, {
            selector: string;
            function_idx: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    }, {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    }>;
    abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        inputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        name: z.ZodString;
        outputs: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, "many">;
        stateMutability: z.ZodOptional<z.ZodLiteral<"view">>;
        state_mutability: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof FunctionAbiType>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }, {
        name: string;
        type: FunctionAbiType;
        inputs: {
            name: string;
            type: string;
        }[];
        outputs: {
            name: string;
            type: string;
        }[];
        stateMutability?: "view" | undefined;
        state_mutability?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        name: z.ZodString;
        members: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        kind: z.ZodLiteral<"struct">;
        type: z.ZodLiteral<"event">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        type: "event";
        kind: "struct";
        members: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>, z.ZodObject<{
        name: z.ZodString;
        type: z.ZodLiteral<"event">;
        data: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
        keys: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
            kind: z.ZodUnion<[z.ZodLiteral<"key">, z.ZodLiteral<"data">]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            kind: "key" | "data";
        }, {
            name: string;
            type: string;
            kind: "key" | "data";
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }, {
        name: string;
        keys: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
        type: "event";
        data: {
            name: string;
            type: string;
            kind: "key" | "data";
        }[];
    }>]>, z.ZodObject<{
        members: z.ZodArray<z.ZodIntersection<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodUnion<[z.ZodLiteral<"felt">, z.ZodLiteral<"felt*">, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
        }, {
            name: string;
            type: string;
        }>, z.ZodObject<{
            offset: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            offset: number;
        }, {
            offset: number;
        }>>, "many">;
        name: z.ZodString;
        size: z.ZodNumber;
        type: z.ZodLiteral<"struct">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }, {
        name: string;
        type: "struct";
        members: ({
            name: string;
            type: string;
        } & {
            offset: number;
        })[];
        size: number;
    }>, z.ZodAny]>, "many">;
}, "strip", z.ZodTypeAny, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    };
    abi: any[];
    sierra_program: string[];
    contract_class_version: string;
    sierra_program_debug_info?: {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    } | undefined;
}, {
    entry_points_by_type: {
        CONSTRUCTOR: {
            selector: string;
            function_idx: number;
        }[];
        EXTERNAL: {
            selector: string;
            function_idx: number;
        }[];
        L1_HANDLER: {
            selector: string;
            function_idx: number;
        }[];
    };
    abi: any[];
    sierra_program: string[];
    contract_class_version: string;
    sierra_program_debug_info?: {
        type_names: [number, string][];
        libfunc_names: [number, string][];
        user_func_names: [number, string][];
    } | undefined;
}>]>;
