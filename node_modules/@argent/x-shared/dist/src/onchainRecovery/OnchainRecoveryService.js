import { stringToBytes as p } from "@scure/base";
import { pedersen as v, keccak as y } from "../../node_modules/.pnpm/micro-starknet@0.2.3/node_modules/micro-starknet/lib/esm/index.js";
import { ec as h, encode as a } from "starknet";
import o from "url-join";
import { onchainRecoverySchema as u, activeOnchainRecoverySchema as m, startOnchainRecoverySchema as S } from "./schema.js";
class x {
  constructor(e, t) {
    this.apiBase = e, this.httpService = t;
  }
  /**
   * Retrieves the on-chain recovery details for a given address and recovery ID.
   * If no recovery ID is provided, it retrieves the latest recovery details.
   * @param address - The address to retrieve the recovery details.
   * @param recoveryId - The recovery ID to retrieve the details.
   * @returns A promise that resolves to the on-chain recovery details.
   */
  async getRecovery(e, t) {
    const r = o(this.apiBase, "accounts", "starknet", e, "recovery", `${t}`), s = await this.httpService.get(r), c = u.safeParse(s);
    return c.error ? null : c.data;
  }
  /**
   * Retrieves the on-chain recovery details for a given address and recovery ID.
   * If no recovery ID is provided, it retrieves the latest recovery details.
   * @param address - The address to retrieve the current active recovery details.
   * @returns A promise that resolves to the on-chain recovery details.
   */
  async getActiveRecovery(e) {
    const t = o(this.apiBase, "accounts", "starknet", e, "recovery"), r = await this.httpService.get(t), s = m.safeParse(r);
    return s.error ? null : s.data;
  }
  /**
   * Starts the recovery process for a given address.
   * @param address - The address to recover.
   * @param feeToken - The token to be used for the recovery fee.
   * @param publicKey - The public key of the signer.
   * @param privateKey - The private key of the signer.
   * @returns A promise that resolves to the recovery details.
   */
  async startRecovery(e, t, r, s) {
    const { r: c, s: n } = h.starkCurve.sign(v(y(p("utf8", "starknet:recovery")), r), s), i = {
      feeToken: t,
      signerSignature: {
        type: "StarknetKey",
        signer: {
          publicKey: r,
          r: a.addHexPrefix(c.toString(16)),
          s: a.addHexPrefix(n.toString(16))
        }
      }
    };
    return await this.httpService.post(`${this.apiBase}/accounts/starknet/${e}/recovery`, {
      body: JSON.stringify(i)
    }, S);
  }
  /**
   * Completes the recovery process for a given address and recovery ID.
   * @param address - The address to recover.
   * @param recoveryId - The recovery ID to complete.
   * @returns A promise that resolves to the recovery details
   *
   */
  async completeRecovery(e, t) {
    const r = o(this.apiBase, "accounts", "starknet", e, "recovery", `${t}`, "complete");
    return await this.httpService.post(r);
  }
}
export {
  x as OnchainRecoveryService
};
