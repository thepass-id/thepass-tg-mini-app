import { z } from 'zod';
export declare enum RecoveryStatusEnum {
    NOT_STARTED = "NOT_STARTED",
    ONGOING = "ONGOING",
    AWAITING_FUNDS = "AWAITING_FUNDS",
    AWAITING_COMPLETION = "AWAITING_COMPLETION",
    COMPLETED = "COMPLETED",
    CANCELLED = "CANCELLED",
    ERROR = "ERROR"
}
export declare const startOnchainRecoverySchema: z.ZodObject<{
    recoveryId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    recoveryId: number;
}, {
    recoveryId: number;
}>;
export declare const recoveryBodySchema: z.ZodObject<{
    feeToken: z.ZodEffects<z.ZodPipeline<z.ZodString, z.ZodEffects<z.ZodString, string, string>>, `0x${string}`, string>;
    signerSignature: z.ZodObject<{
        type: z.ZodLiteral<"StarknetKey">;
        signer: z.ZodObject<{
            publicKey: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            r: z.ZodEffects<z.ZodString, `0x${string}`, string>;
            s: z.ZodEffects<z.ZodString, `0x${string}`, string>;
        }, "strip", z.ZodTypeAny, {
            r: `0x${string}`;
            s: `0x${string}`;
            publicKey: `0x${string}`;
        }, {
            r: string;
            s: string;
            publicKey: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "StarknetKey";
        signer: {
            r: `0x${string}`;
            s: `0x${string}`;
            publicKey: `0x${string}`;
        };
    }, {
        type: "StarknetKey";
        signer: {
            r: string;
            s: string;
            publicKey: string;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    feeToken: `0x${string}`;
    signerSignature: {
        type: "StarknetKey";
        signer: {
            r: `0x${string}`;
            s: `0x${string}`;
            publicKey: `0x${string}`;
        };
    };
}, {
    feeToken: string;
    signerSignature: {
        type: "StarknetKey";
        signer: {
            r: string;
            s: string;
            publicKey: string;
        };
    };
}>;
export declare const recoveryStatusSchema: z.ZodNativeEnum<typeof RecoveryStatusEnum>;
export declare const recoveryBaseSchema: z.ZodObject<{
    recoveryId: z.ZodNumber;
    status: z.ZodNativeEnum<typeof RecoveryStatusEnum>;
    completionTime: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    status: RecoveryStatusEnum;
    recoveryId: number;
    completionTime?: number[] | undefined;
}, {
    status: RecoveryStatusEnum;
    recoveryId: number;
    completionTime?: number[] | undefined;
}>;
export declare const activeOnchainRecoverySchema: z.ZodObject<{
    activeRecovery: z.ZodOptional<z.ZodUnion<[z.ZodOptional<z.ZodObject<{
        recoveryId: z.ZodNumber;
        status: z.ZodNativeEnum<typeof RecoveryStatusEnum>;
        completionTime: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    }, {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    }>>, z.ZodNull]>>;
    minFees: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    activeRecovery?: {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    } | null | undefined;
    minFees?: Record<string, number> | undefined;
}, {
    activeRecovery?: {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    } | null | undefined;
    minFees?: Record<string, number> | undefined;
}>;
export declare const onchainRecoverySchema: z.ZodObject<{
    recovery: z.ZodOptional<z.ZodUnion<[z.ZodOptional<z.ZodObject<{
        recoveryId: z.ZodNumber;
        status: z.ZodNativeEnum<typeof RecoveryStatusEnum>;
        completionTime: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    }, {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    }>>, z.ZodNull]>>;
    minFees: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    minFees?: Record<string, number> | undefined;
    recovery?: {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    } | null | undefined;
}, {
    minFees?: Record<string, number> | undefined;
    recovery?: {
        status: RecoveryStatusEnum;
        recoveryId: number;
        completionTime?: number[] | undefined;
    } | null | undefined;
}>;
export declare enum StartOnchainRecoveryErrorStatusEnum {
    UNDEPLOYED_ACCOUNT = "undeployedAccount",
    NOT_ENOUGH_TO_PAY_FEES = "notEnoughToPayFees",
    RECOVERY_ALREADY_EXISTS = "recoveryAlreadyExists"
}
export declare const startOnchainRecoveryErrorStatusSchema: z.ZodNativeEnum<typeof StartOnchainRecoveryErrorStatusEnum>;
export declare const startOnchainRecoveryErrorSchema: z.ZodObject<{
    status: z.ZodNativeEnum<typeof StartOnchainRecoveryErrorStatusEnum>;
}, "strip", z.ZodTypeAny, {
    status: StartOnchainRecoveryErrorStatusEnum;
}, {
    status: StartOnchainRecoveryErrorStatusEnum;
}>;
export type StartOnchainRecovery = z.infer<typeof startOnchainRecoverySchema>;
export type OnchainRecovery = z.infer<typeof onchainRecoverySchema>;
export type ActiveOnchainRecovery = z.infer<typeof activeOnchainRecoverySchema>;
export type RecoveryStatus = z.infer<typeof recoveryStatusSchema>;
export type StartOnchainRecoveryError = z.infer<typeof startOnchainRecoveryErrorSchema>;
export type StartOnchainRecoveryErrorStatus = z.infer<typeof startOnchainRecoveryErrorStatusSchema>;
