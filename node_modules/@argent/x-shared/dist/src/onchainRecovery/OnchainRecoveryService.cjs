"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const u=require("@scure/base"),i=require("../../node_modules/.pnpm/micro-starknet@0.2.3/node_modules/micro-starknet/lib/esm/index.cjs"),n=require("starknet"),a=require("url-join"),o=require("./schema.cjs");class h{constructor(e,t){this.apiBase=e,this.httpService=t}async getRecovery(e,t){const r=a(this.apiBase,"accounts","starknet",e,"recovery",`${t}`),s=await this.httpService.get(r),c=o.onchainRecoverySchema.safeParse(s);return c.error?null:c.data}async getActiveRecovery(e){const t=a(this.apiBase,"accounts","starknet",e,"recovery"),r=await this.httpService.get(t),s=o.activeOnchainRecoverySchema.safeParse(r);return s.error?null:s.data}async startRecovery(e,t,r,s){const{r:c,s:v}=n.ec.starkCurve.sign(i.pedersen(i.keccak(u.stringToBytes("utf8","starknet:recovery")),r),s),y={feeToken:t,signerSignature:{type:"StarknetKey",signer:{publicKey:r,r:n.encode.addHexPrefix(c.toString(16)),s:n.encode.addHexPrefix(v.toString(16))}}};return await this.httpService.post(`${this.apiBase}/accounts/starknet/${e}/recovery`,{body:JSON.stringify(y)},o.startOnchainRecoverySchema)}async completeRecovery(e,t){const r=a(this.apiBase,"accounts","starknet",e,"recovery",`${t}`,"complete");return await this.httpService.post(r)}}exports.OnchainRecoveryService=h;
